the following is a conversation with chris ladner his third time on this podcast as i've said many times before he's one of the most brilliant engineers in modern computing having created llm compiler infrastructure project the clang compiler the swift programming language a lot of key contributions to tensorflow and tpus as part of google he served as vice president of autopilot software at tesla was a software innovator and leader at apple and now he cocreated a new full stack ai infrastructure for distributed training inference and deployment on all kinds of hardware called modular and a new programming language called mojo that is a superset of python giving you all the usability of python but with the performance of cc plus plus in many cases mojocode has demonstrated over thirty thousand x speed up over python if you love machine learning if you love python you should definitely give mojo a try this programming language this new ai framework and infrastructure and this conversation with chris is mind blowing i love it it gets pretty technical at times so i hope you hang on for the ride and now a quick few second mention of each sponsor check them out in the description it's the best way to support this podcast we got iherb for health numerai for world's hardest data science tournament and insighttracker for tracking your biological data choose wisely my friends also if you want to work with our team our amazing team we're always hiring go to alexfreedman dot com slash hiring and now onto the full ad reads as always no ads in the middle i try to make this interesting but if you skip them if you must my friends please still check out the sponsors i enjoy their stuff maybe you will too this show is brought to you by iherb a platform a website a place where you can go and get high quality selected just for you health and wellness products for great value inexpensive affordable i get fish oil over there it's one of the main supplements i've taken for a long long long time in pill form makes me feel like i'm oiling the machine that is the human body and the human mind even just saying that makes me wonder what is the power of the placebo effect in all of this i'm actually a big believer in the power of the human mind coupled with the effectiveness of medication and supplements and nutrition and diet and exercise all of it if you couple the belief that the thing will work with stuff that actually works it's like a supercharge because the mind there's something about the mind allowing the thing to work and maybe the belief that it works reduces stress and has kinda secondary and tertiary effects that you can't even comprehend on the entirety of the biological system that is a human body it's so fascinating and it's so difficult to do good studies on that because the whole point is you want to study the effect of the entirety of the lifestyle and diet decisions you make on the entirety of the human organism the billions of organisms that make up a single organism that is you anyway get twenty two percent off with promo code lex when you go to iherb dot com slash lex this show is also brought to you by numerai a hedge fund that uses ai and machine learning to make investment decisions they created a tournament a challenge for all machine learning gurus to come and to compete against each other to build the best predictive models for financial markets the stakes are high this is the kind of problems in the machine learning space that i really care about real world problems with high stakes not toy problems not imagenet now imagenet and all that kind of stuff is good for exploring little ideas the nuances of architectures training procedures of cool little ideas of the entirety of the pipeline on how to do machine learning or for education purposes but if you want to really develop ideas that work in the real world you should be working on real world data where the stakes are high and this is probably one of the hardest tournaments for machine learning in the world head over to numerai dot com slash lex to sign up for a tournament and hone your machine learning skills that's numerai dot com slash lex for a chance to play against me and win a share of the tournament prize pool this show is also brought to you by insighttracker a service i use to track biological data as i always say the entirety of the biological organism that is you the individual cells all the life force that makes up the details of the cells and the proteins and the bloods and the organs and the individual systems that are interconnected to each other in these incredible complex ways that are all asynchronously communicating with each other through chemistry through physics through electrical signals through mechanical signals through whatever the hell signals that i can't even find the right words for it's an incredible system how is it possible that this thing works at all i'm looking out into the distance now as i say these words and my visual cortex is processing all of it and somehow make sense of all of it this is incredible anyway measuring data on this incredible organism is good and companies that allow you to measure it in order to make lifestyle decisions is obviously the future that's why i support insidetracker you can get special savings for a limited time when you go to inside tracker dot com slash lex this is the lex freedom podcast to support it please check out our sponsors in the description and now dear friends here's chris lattner it's been i think two years since we last talked and then in that time you somehow went and cocreated a new programming language called mojo so it's optimized for ai it's a superset of python let's look at the big picture what is the vision for mojo for mojo well so i mean i think you have to zoom out so i've been working on a lot of related technologies for many many years so i've worked on llvm and a lot of things and mobile and servers and things like this but the world's changing and what's happened with ai is we have new gpus and new machine learning accelerators and other asics and things like that that make ai go real fast at google i worked on tpus that's one of the biggest largest scale deployed systems that exist for ai mhmm and really what you see is if you look across all of the things that are happening in the industry there's this new compute platform coming and it's not just about cpus or gpus or tpus or npus or ipus or whatever all the pus right it's about how do we program these things right and so for software folks like us right it doesn't do us any good if there's this amazing hardware that we can't use and one of the things you find out really quick is that having the theoretical capability of programming something and then having the world's power and the innovation of all the all the smart people in the world get unleashed on something can be quite different and so really where mojo came from was starting from a problem of we need to be able to take machine learning take the infrastructure underneath it and make it way more accessible way more usable way more understandable by normal people and researchers and other folks that are not themselves like experts in gpus and things like this and then through that journey we realized hey we need syntax for this we need to do a programming language so one one of the the main features of language say so fully ingest is that it allows you to have the file extension to be an emoji or the fire emoji which is one of the first emojis used as a file extension i've ever seen in my life and then you ask yourself the question why in the twenty first century are we not using unicode for file extensions this that means it's an epic decision i think clearly the most important decision made in the most but you could also just use m o j o as the file extension well so okay so take a step back i mean come on lex do you think that the world's ready for this this is a big moment in the world right this is where we release this onto the wall this is innovation i mean it really is kinda brilliant emojis are such a big part of our daily lives why isn't it not in programming well and and like you take a step back and look look at what file extensions are right they're basically metadata right and so why are we spending all the screen space on them and all this stuff also you know you have them stacked up next to text files and pdf files and whatever else like if you're gonna do something cool you want to stand out right emojis are colorful they're visual they're they're beautiful yeah right what's been the response so far from is is there a support on like windows on operating system in displaying like file explorer yeah yeah can they the one problem i've seen is the git doesn't escape it right uh-huh and so it thinks that the fire emoji is unprintable and so it like prints out weird hex things if you use a command line git tool but everything else as far as i'm aware works fine and i i have faith that git can be improved so i'm not i'm not worried github is fine github is fine yep github is fine visual studio code windows like all this stuff totally ready because people have internationalization yeah in their normal part of their path so let's just like take the next step right somewhere between oh wow that makes sense cool i like new things two oh my god you're killing my baby like what are you talking about this could never be like i can never handle this how am i gonna type this like all these things and so this is something where i think that the world will get there we don't have to bet the whole farm on this i think we can provide both paths but i think it'll be great when can we have emojis as part of the code i wonder yeah so i mean lots of languages provide that so i think that we have partial support for that it's probably not fully done yet but but yeah you can you can do that for example in swift you can do that for sure so an example we give gave at apple was the the dog cow yeah so that's a classical mac heritage thing and so you use the dog and the cow emoji together and that could be your variable name but of course the internet went and made pile of poop for everything yeah so you know if you wanna name your function pile of poop then you can totally go to town and see how that gets through code review okay so let me just ask a bunch of random questions so is mojo primarily designed for ais or is it a general purpose programming yeah good question so it's ai first and so ai is driving a lot of the requirements and so modular is building and designing and driving mojo forward and it's not because it's an interesting project theoretically to build it's because we need it and so at modular we're really tackling the ai infrastructure landscape and the big problems in ai and the reasons that it is so difficult to use and scale and adopt and deploy and like all these big problems in ai and so we're coming at it from that perspective now when you do that when you start tackling these problems you realize that the solution to these problems isn't actually an ai specific solution and so what we're doing is we're building mojo to be a fully general programming language and that means that you can obviously tackle gpus and cpus and like these ai things but it's also a really great way to build numpy and other things like that or you know just if you look at what many python libraries are today often they're a layer of python for the api and they end up being c and c plus plus code underneath them that's very true in ai that's true in lots of other domains as well and so anytime you see this pattern that's an opportunity for mojo to help simplify the world and help people have one thing mhmm so optimize through simplification by having one thing so you mentioned modular mojo is the programming language modular is the whole software stack so just over a year ago we started this company called modular yeah k what modular is about is it's about taking ai and up leveling it into the next generation right and so if you take a step back what's gone on in the last five six seven eight years is that we've had things like tensorflow and pytorch these other systems come in you've used them you know this and what's happened is these things have grown like crazy and they get tons of users it's in production deployment scenarios it's being used to power so many systems i mean ai is all around us now now it used to be controversial years ago but now it's it's a thing but the challenge with these systems is that they haven't always been thought out with current demands in mind and so you think about it when where were llms eight years ago well they didn't exist right ai has changed so much and a lot of what people are doing today are very different than when these systems were built and meanwhile the hardware side of this has gotten into a huge mess there's tons of new chips and accelerators and every every big company is announcing a new chip every day it feels like and so between that you have like this moving system on one side a moving system on the other side and it just turns into this gigantic mess which makes it very difficult for people to actually use ai particularly in production deployment scenarios scenarios hence what modular is doing is we're helping build out that software stack to help solve some of those problems so then people can be more productive and get more ai research into production now what mojo does is it's a really really really important piece of that and so that is you know part of that engine and part of the technology that allows us to solve these problems so mojo is a programming language that allows you to do the high level programming the low level programming they do all kinds of programming in that spectrum that gets you closer and closer to the hardware so take a step back so lex what do you love about python oh boy where do i begin what is love what do i love about python you're you're a guy who knows love i know this yes how intuitive it is how it feels like i'm writing natural language english how when i can not just write but read other people's code somehow i can understand it faster it's more condensed than other languages like ones i'm really familiar with like c plus plus mhmm and c there's a bunch of sexy little features yeah we'll probably talk about some of them but list comprehensions and stuff like this well so and and don't forget the the entire ecosystem of all the packages that's probably huge because there's always something if you wanna do anything there's always a package yeah so it's not just the ecosystem of the packages and the ecosystem of the humans that do it that that that's a really that's an interesting dynamic that's good yeah something about the the usability and the ecosystem makes the thing viral and it grows and then it's a virtuous cycle i think well there there's many things that went into that like so i think that ml was very good for python and so i think that tensorflow and pytorch and these systems embracing python really took and helped python grow but i think that the major thing underlying it is that python's like the universal connector mhmm right it really helps bring together lots of different systems so you can compose them and build out larger systems without having to understand how it works but then what is the problem with python well i guess you could say several things but probably that it's slow i think that's usually what people complain about right and so so i mean other people complain about tabs and spaces versus curly braces or whatever but i mean those people are just wrong because it is actually just better to use indentation wow strong words so actually i just on a small tangent let's actually take that let's take all kinds of tangents oh come on lex you can push me on i i could take it sign and sign listen i've recently left emacs for versus code and the kind of hate mail i had to receive because on the way to doing that i also said i've considered vim yep and chose not to and went with versus code and just on deep religions right anyway tabs is an interesting design decision and so you've really written a new programming language here yes it is a a superset of python but you can make a bunch of different interesting decisions here totally yeah and you chose actually to stick with python as in terms of some of the syntax well so so let let me explain why right so i mean you can explain this in many rational ways mhmm i i think that the annotation is beautiful but that's not a rational explanation right so but i can defend it rationally right so first of all python one has millions of programmers yeah it is huge it's everywhere it owns machine learning right so factually it is the thing right second of all if you look at it c code c plus plus code java whatever swift curly brace languages also run through formatting tools and get indented mhmm and so if they're not indented correctly first of all it will twist your brain around it can lead to bugs there's notorious bugs that have happened across time where the the annotation was wrong or misleading and it wasn't formatted right and so it turned into an issue right and so what ends up happening in modern large scale code bases is people run automatic formatters so now what you end up with is indentation and curly braces well if you're gonna have you know the notion of grouping mhmm why not have one thing right and get rid of all the clutter and have a more beautiful thing right also you look at many of these languages it's like okay well you can have curly braces or you can omit them if there's one statement or you just like enter this entire world of complicated design space that objectively you don't need if you have python style indentation so yeah i would love to actually see statistics on errors made because of indentation like how many errors are made in python versus in c plus plus that have to do with basic formatting all that kind of stuff i would love to see i think it's it's probably pretty minor because once you get like you use versus code i do too so if you get versus code set up it does the indentation for you generally right and so you don't you know it's actually really nice to not have to fight it and then what you can see is the editor's telling you how your code will work by indenting it which i think is pretty cool i honestly don't think i've ever i don't remember having an error in python because i indented stuff wrong so i mean i think that there's again this is a religious thing and so i'll i can joke about it and i love i love to kind of you know i realize that this is such a polarizing thing and everybody wants to argue about it and so i like poking at the bear a little bit right but but frankly right come back to the first point python one like it's huge it's an ai it's the right thing for us like we see mojo as being an incredible part of the python ecosystem we're not looking to break python or change it or quote unquote fix it mhmm we love python for what it is our view is that python is just not done yet and so if you look at you know you mentioned python being slow well there's a couple of different things that go into that which we can talk about if you want but one of them is that it just doesn't have those features that you would use to do c like programming mhmm and so if you say okay well i'm forced out of python into c for certain use cases well then what we're doing is we're saying okay well why why is that can we just add those features that are missing from python back up to mojo and then you can have everything that's great about python all the things that you're talking about that you love mhmm plus not be forced out of it when you do something a little bit more computationally intense or weird or hardware y or whatever it is you're doing well a million questions i wanna ask what yeah high level again is it compiled or is it an interpreted language so python is just in time compilation what's what's mojo so mojo a complicated answer does all the things mhmm so it's interpreted it's chip compiled and it's statically compiled and so this is for a variety of reasons so one of the things that makes python beautiful is that it's very dynamic mhmm and because it's dynamic one of the things they added is that it has this powerful metaprogramming feature and so if you look at something like pytorch or tensorflow or or i mean even a simple simple use case like you define a class that has the plus method mhmm right you can overload the dunder methods like dunder add for example and then the plus method works on your class and so it has very nice and very expressive dynamic metaprogramming features in mojo we want all those features come in like we don't wanna break python we want it all to work but the problem is is you can't run those super dynamic features on an embedded processor or on a gpu right or or if you could you probably don't want to just because of the performance and so we entered this question of saying okay how do you get the power of this dynamic metaprogramming into a language that has to be super efficient in specific cases and so what we did was just said okay we'll take that interpreter python has an interpreter in it mhmm right take the interpreter and allow it to run at compile time mhmm and so now what you get is you get compile time metaprogramming mhmm and so this is super interesting and super powerful because one of the big advantages you get is you get python style expressive apis you get the ability to have overloaded operators and if you look at what happens inside of like pytorch for example with automatic differentiation and eager mode and like all these things they're using these really dynamic and powerful features at runtime but we can take those features and lift them so that they run at compile time so you're because c plus plus does meta programming with with with templates yep but it's really messy it's super messy it's it's always it was accidentally i mean different people have different interpretations my interpretation is that it was made accidentally powerful it was not designed to be turing complete for example but that was discovered kind of along the way accidentally and so there have been a number of languages in the space and so they usually have templates or code instantiation code copying features of various sorts some more modern languages or some more new newer languages let's say like you know they're fairly unknown like zig for example says okay well let's take all of those types that you can run it all those things you can do at runtime and allow them to happen at compile time and so one of the problems with c plus plus i mean which is one of one of the problems with c plus plus here we go is wrong words we're gonna send everybody to oh it's okay i mean everybody hates me for a variety of reasons anyways i'm sure right i've written just the way they show love is to be fair enough c plus plus code to earn a little bit of grumpiness with c plus plus but but one of the problems with it is that the metaprogramming system templates is just a completely different universe from the normal runtime programming world and so if you do metaprogramming and programming it's just like a different universe different syntax different concepts different stuff going on and so again one of our goals with mojo is to make things really easy to use easy to learn and so there's a natural stepping stone and so as you do this you say okay well i have to do programming at run time i have to do programming at compile time why are these different things how hard is that to pull it off because that sounds to me as a fan of metaprogramming in c plus plus even how how hard is it to pull that off that sounds really really exciting because you can do the same style programming at compile time and at run time that's really really exciting yep and so i mean in terms of the compiler implementation details it's hard i won't be shy about that it's super hard it requires i mean what mojo has underneath the covers is a completely new approach to the design of the compiler itself mhmm and so this builds on these technologies like mlir that you mentioned but it also includes other like caching and other interpreters and jit compilers and other stuff like that interpreter inside the comp within the compiler yes oh man and so it really takes the standard model of programming languages and kind of twist it and unifies it with the runtime model right which i think is really cool and to me the value of that is that again many of these languages have metaprogramming features like they grow macros or something right lisp right yes i i know your roots right you know and this is a powerful thing right and so you know if you go back to lisp one of the most powerful things about about it is that it said that the metaprogramming and the programming are the same right and so that made it way simpler way more consistent way easier to understand reason about and it made it more composable so if you build a library you can use it both at runtime and compile time which is pretty cool yeah and then for machine learning i think metaprogramming i think we could generally say is extremely useful and so you you get features i mean i'll jump around but there's the feature of auto tuning and adaptive compilation just blows my mind yeah well so okay so let's come back to that sure alright so so what what what is what is what is machine learning like what or what is a machine learning model like you take a pytorch model off there right it's really interesting to me because what a pie what pytorch and what tensorflow and all these frameworks are kind of pushing compute into is they're pushing into like this abstract specification of a compute problem which then gets mapped in a whole bunch of different ways mhmm right right so this is why it became a metaprogramming problem is that you wanna be able to say cool i have i have this neural net now run with batch size a thousand right do do do a do a mapping across batch or okay i wanna take this problem now running across a thousand cpus mhmm or gpus right and so like this this problem of like describe the compute and then map it and do things and transform it are are like actually it's very profound and that's one of the things that makes machine learning systems really special maybe can you describe auto tuning and how do you pull off i mean i guess adaptive compilation is what we're talking about as metaprogramming yeah how do you pull off auto tune i mean is that is that as profound as i think it is it just seems like a really like you know we mentioned list comprehensions to me from a quick glance at mojo which by the way i have to absolutely like dive in as i realize how amazing this is i absolutely must dive in it that looks like just an incredible feature for machine learning people yeah well so so what is auto tuning so take a step back auto tuning is a feature in mojo it's not so very very little of what we're doing is actually research like many of these ideas have existed in other systems and other places and so what we're doing is we're pulling together good ideas remixing them and making them into a hopefully a beautiful system right and so auto tuning the observation is that turns out hardware systems algorithms are really complicated turns out maybe you don't actually want to know how the hardware works right a lot of people don't right and so there are lots of really smart hardware people i know a lot of them where they know everything about okay the the cache size is this and the number of registers is that and if you use this what length of vector it's gonna be super efficient because it maps directly onto what it can do and like all this kind of stuff where the gpu has sms and it has a warp size of whatever right all the stuff that goes into these things where the tile size of a tpu is one twenty eight like these these factoids right my belief is that most normal people and i love hardware people also i'm not trying to offend literally everybody in the internet but most programmers actually don't wanna know this stuff mhmm right and so if you come at it from perspective of how do we allow people to build both more abstracted but also more portable code because you know it could be that the vector length changes or the cache size changes or it could be that the tile size of your matrix changes or the number you know an a one hundred versus an h one hundred versus a volta versus a whatever gpu have different characteristics right a lot of the algorithms that you run are actually the same but the parameters these magic numbers you have to fill in end up being really fiddly numbers that an expert has to go figure out and so what auto tuning does it says okay well guess what there's a lot of compute out there right so instead of having humans go randomly try all the things or do a grid search or go search some complicated multidimensional space how about we have computers do that mhmm right and so what auto tuning does is you can say hey here's my algorithm if it's a matrix operation or something like that you can say okay i'm gonna carve it up into blocks i'm gonna do those blocks in parallel and i wanna this this with a hundred and twenty eight things that i'm running on i wanna cut it this way or that way or whatever and you can say hey go see which one's actually empirically better on the system mhmm and then the result of that you cache for that system yep you save it and so come back to twisting your compiler brain right so not only does the compiler have an interpreter that choose to do meta programming that compiler that interpreter that meta programming now has to actually take your code and go run it on a target machine see see which one it likes the best and then stitch it in and then keep going right so part of the compilation is machine specific yeah well so i mean this is an optional feature right so you don't have to use it for everything but yeah if you if you're so one one of one of the things that we're in the quest of is ultimate performance yes right ultimate performance is important for a couple of reasons right so if you're an enterprise you're looking to save costs and compute and things like this ultimate performance translates to you know fewer servers like if you care about the environment hey better performance leads to more efficiency right i mean you could joke and say like you know python's bad for the environment right and so if you move to mojo it's like at least ten x better just out of the box and then keep going right but but performance is also interesting because it leads to better products yeah and so in the space of machine learning right if you reduce the latency of a model so that it runs faster so every time you query the server running the model it takes less time well then the product team can go and make the model bigger mhmm well that's actually makes it so you have a better experience as a customer and so a lot of people care about that so for auto tuning for like tile size you mentioned one twenty eight for tpu you would specify like a bunch of options to try yeah just in the code yep just simple statement yep and then you could just set and forget and know depending what wherever it compiles it'll actually be the fastest way and and yeah exactly and the beauty of this is that it helps you in a whole bunch of different ways right so if you're building so often what'll happen is that you know you've written a bunch of software yourself right you you wake up one day you say i have an idea i'm gonna go cut up some code i get to work i forget about it i move on with life i come back six months or a year or two years or three years later you dust it off and you go use it again in a new environment mhmm and maybe your gpu is different maybe you're running on a server instead of a laptop maybe whatever right and so the problem now is you say okay well i mean again not everybody cares about performance but if you do you say okay well i wanna take advantage of all these new features i don't wanna break the old thing though right and so the typical way of handling this kind of stuff before is you know if you're talking about c plus plus templates or you're talking about c with macros you end up with ifdefs you get like all these weird things get layered in make the code super complicated and then how do you test it mhmm right it becomes this this crazy complexity multidimensional space that you have to worry about and you know that just doesn't scale very well actually let me just jump around before i go to some specific features like the increase in performance here that we're talking about can be just insane you write that mojo can provide a thirty five thousand x speed up over python how does it do that yeah so i can even do more but we'll get to that so so first of all when we say that we're talking about what's called cpython it's the default python that everybody uses when you type python three that's like typically the one you use right cpython is an interpreter and so interpreters they have an extra layer of like byte codes and things like this that they have to go read parse interpret and it makes them kind of slow from that perspective and so one of the first things we do is we move to a compiler and so just moving to a compiler getting the interpreter out of the loop is two to five to ten x speed up depending on the code so just out of the gate just using more modern techniques right now if you do that one of the things you can do is you can start to look at how cpython started to lay out data and so one of the things that that cpython did and this isn't part of the python spec necessarily but this is just sets of decisions is that if you take an integer for example it'll put it in an object mhmm because in python everything's an object and so they do the very logical thing of keeping the memory representation of all objects the same so all objects have a header they have like payload data they and and what this means is that every time you pass around an object you're passing around a pointer to the data well this has overhead right turns out that modern computers don't like chasing pointers very much and things like this it means that you have to allocate the data means you have to reference count it which is another way of that python uses to keep track of memory and so this has a lot of overhead and so if you say okay let's try to get that out of the heap out of a box out of an indirection and into the registers mhmm that's that's another ten x so it adds up if you if you're reference counting every single every every single thing you create that adds up yep and if you look at you know people complain about the python gil this is one of the things that hurts parallelism that's because of the reference counting right and so the gil and reference counting are very tightly intertwined in python it's not the only thing but it's very tightly intertwined and so then you lean into this and you say okay cool well modern computers they can do more than one operation at a time and so they have vectors what is a vector well a vector allows you to take one instead of taking one piece of data doing an add or multiply and then picking up the next one you can now do four or eight or sixteen or thirty two at a time right well python doesn't expose that because of reasons and so now you can say okay well you can adopt that now you have threads now you have like additional things like you can control memory hierarchy and so what mojo allows you to do is it allows you to start taking advantage of all these powerful things that have been built into the hardware over time and it gives the library gives very nice features so you can say just parallelize this do this in parallel right so it's very very powerful weapons against slowness which is why people have been i think having fun like just taking code and making it go fast because it's just kind of in a adrenaline rush to see like how fast you can get things before i talk about some of the interesting stuff with parallelization and all that let's let's let's first talk about like the basics we talked the indentation right so this thing looks like python it's sexy and beautiful like python as i mentioned yep is it a typed language so what's the role of types yeah good question so python has types it has strings it has integers it has dictionaries and like all that stuff but they all live at runtime mhmm right and so because all those types live at runtime in python you never or you don't have to spell them python also has like this whole typing thing going on now and a lot of people use it yeah i'm not talking about that that's that's kind of a different thing we can go back to that if you want but but typically the you know you just say i take i have a def and my def takes two parameters i'm gonna call them a and b i don't have to write a type k so that is great but what that does is that forces what's called a consistent representation so these things have to be a pointer to an object with the object header and they all have to look the same and then when you dispatch a method you go through all the same different paths no matter what the the receiver or whatever that type is so what mojo does is it allows you to have more than one kind of type and so what it does is allows you to say okay cool i have i have an object and objects behave like python does and so it's fully dynamic and that's all great and for many things classes like that's all very powerful and very important but if you wanna say hey it's an integer and it's thirty two bits or sixty four bits or whatever it is or it's a floating point value it's sixty four bits well then the compiler can take that and it can use that to do way better optimization and it turns out again getting rid of the interactions that's huge means you can get better code completion because you have because compiler knows what the type is and so knows what operations work on it and so that's actually pretty huge and so what mojo does allows you to progressively adopt types into your program and so you can start again it's compatible with python and so then you can add however many types you want wherever you want them and if if you don't wanna deal with it you don't have to deal with it right and so one of one of you know our opinions on this is that it's not that types are the right thing or the wrong thing it's that they're a useful thing well so it's kind of optional it's not strict typing you don't have to specify type exactly okay so starting from the thing that python's kinda reaching towards right now with trying to inject types into it would it yeah with a very different approach but yes yes so what's the different approach i i'm actually one of the people that have not been using types very much in python so i haven't it's okay why why did you say it just well because i i know the importance it's like adults use strict typing and so i'm i refuse to grow up in that sense it's a it's a kind of rebellion but i i i just know that it probably reduces the amount of errors even just for forget about performance improvements it probably reduces errors when you do strict typing yeah so i mean i think it's it's interesting if you look at that right and the reason i was i'm giving you a hard time again is that that there's this this cultural norm this pressure this like there has to be a right way to do things like you know only grown ups only do it one way and if you don't do that you should feel bad yes right like some people feel like it python's a guilty pleasure or something mhmm and that's like when it gets serious i need to go rewrite it right yeah exactly well i mean cool i understand history and i understand kind of where this comes from but i don't think it has to be guilty pleasure yeah right so if you look at that you say why do you have to rewrite it well you have to rewrite it to deploy mhmm well why do you wanna deploy well you care about performance you care about predictability or you want you know a tiny thing on the server that has no dependencies or you know you have objectives that you're trying to attain so what if python can achieve those objectives so if you want types well maybe you want types because you wanna make sure you're passing the right thing mhmm sure you can add a type if you don't care you're prototyping some stuff you're hacking some things out you're like pulling some ram code off the internet it should just work right and you shouldn't be like pressured you shouldn't feel bad about doing the right thing or the thing that feels good now if you're in a team right you're working at some massive internet company and you have four hundred million lines of python code well they they may have a house rule that you use types yeah right because it makes it easier for different humans to talk to each other and understand what's going on and bugs at scale right and so there there are lots of good reasons why you might wanna use types but that doesn't mean that everybody should use them all the time right so what mojo does is it says cool well allow people to use types and if you use types you get nice things out of it right you get better performance and things like this right but mojo is a full compatible superset of python mhmm right and so that means it has to work without types it has to support all the dynamic things has to support all the packages has to support for comprehension list comprehensions and things like this right and so that that that starting point i think is really important and i think that again you can look at why i care so much about this and there there's many different aspects of that one of which is the world went through a very challenging migration from python two to python three right this yes this migration took many years and it was very painful for many teams right and there's a lot of lot of things that went on in that i'm not an expert in all the details and i honestly don't wanna be mhmm i don't want the world to have to go through that yeah right and you know people can ignore mojo and if it's not their thing that's that's cool but if they wanna use mojo i don't want them to have to rewrite all their code yeah i mean this okay the superset part is is just i mean there's so much brilliant stuff here that definitely is is is incredible we'll talk about that yeah well first of all how's the typing yeah implemented differently in in python versus mojo yeah so this heterogeneous flexibility you said is differently implemented yeah so i'm i'm not a full expert in the the whole backstory on types in python so i'll give you i'll give you that i can give you my understanding mhmm my understanding is basically like many dynamic languages the ecosystem went through a phase where people went from writing scripts to writing large scale huge code bases in python and at scale it kinda helps to have types yeah people wanna be able to reason about interfaces what what do you expect string or an int or like what what these basic things right and so what the python community started doing is it started saying okay let's have tools on the side checker tools right the go and like enforce and variance check for bugs try to identify things these are called static analysis tools generally and so these tools run over your code and try to look for bugs what ended up happening is there's so many of these things so many different weird patterns and different approaches on specifying the types and different things going on that the python community realized and recognized hey hey hey there's a thing here and so what they started to do is they started to standardize the syntax for adding types to python now one of the challenges that they had is that they're coming from kind of this fragmented world where there's lots of different tools they have different trade offs and interpretations and the types mean different things and so if you look at types in python according to the python spec the types are ignored right so according to the python spec you can write pretty much anything in in in a type position k and you can technically you can write any expression k now that's beautiful because you can extend it you can do cool things you can write build your own tools you can build your own house linter or something like that right but it's also a problem because any existing python program may be using different tools and they have different interpretations and so if you adopt somebody's package into your ecosystem try to run the tool you prefer it may throw out tons of weird errors and warnings and problems because it's incompatible with how these things work mhmm also because they're added late and they're not checked by the python interpreter is always kind of more of a hint than it is a requirement also the cpython implementation can't use them for performance and so it's really that's the big one right so is you can't utilize the for the compilation for the just in time compilation okay exactly and this this all comes back to the design principle of it's it's kind they're kinda hints they're kind of the definition's a little bit murky it's unclear exactly the interpretation in a bunch of cases and so because of that you can't actually even if you want to it's really difficult to use them to say like it is going to be an int and if it's not it's a problem mhmm right a lot of code would break if you did that that so so in mojo right so you can still use those kind of type annotations it's fine but in mojo if you declare a type and you use it then it means it is going to be that type mhmm and the compiler helps you check that and enforce it and it's safe and it's not it's not a like best effort hint kind of a thing so if you try to shove a string type thing into a integer you get an error from the compiler from the compiler at compile time nice okay what kind of basic types are there yeah so mojo is pretty hardcore in terms of what it tries to do in the language mhmm which is the philosophy there is that we again if you if you look at python right python's a beautiful language because it's so extensible right and so all of the different things in python like for loops and plus and like all these things can be accessed through these underbar underbar methods mhmm k so you have to say okay if i make something that is super fast i can go all the way down to the middle why do i need to have integers built into the language mhmm and so what mojo does is it says okay well we can have this notion of structs so you have classes in python now you can have structs mhmm classes are dynamic structs are static cool we can get high performance we can write c plus plus kind of code with structs if you want these things mix and work beautifully together but what that means is that you can go and implement strings and ints and floats and arrays and all that kind of stuff in the language right and so that's really cool because you know to to me as a id ideal i idealizing compile compiler language type type of person what what i wanna do is i wanna get magic out of the compiler and put it in the libraries because if somebody can you know if if we can build an integer that's beautiful and has an amazing api and does all the things you'd expect an integer to do but you don't like it maybe you want a big integer maybe you want a like sideways integer i don't know like what what all the space of integers are then then you can do that and it's not a second class citizen and so if you look at certain other languages like c plus plus one i also love and use a lot int is hard coded in the language but complex is not mhmm and so isn't it kind of weird that you have this std complex class but you have int and complex tries to look like a natural numeric type and things like this but integers and floating point have these like special promotion rules and other things like that that are magic and they're hacked into the compiler and because of that you can't actually make something that works like the built in types mhmm is there something provided as a standard because you know be because it's ai first you know numerical types are so important here so is there something come like a nice standard implementation of integer and flow yeah so so we're still building all that stuff out so we provide integers and floats and all that kind of stuff we also provide like buffers and tensors and things like that that you'd expect in an ml context honestly we need to keep designing and redesigning and working with the community to build that out and make that better that's not our strength right now give us six months or a year and i think it'll be way better but but the power of putting it in the library means that we can have teams of experts that aren't compiler engineers that can help us design and refine and drive this forward so one of the exciting things we should mention here is that this is this is new and fresh this cake is unbaked it's almost baked you can tell it's delicious but it's not fully ready to be consumed yep that's very fair it is very useful but it's very useful if you're a super low level programmer right now and what we're doing is we're working our way up the stack and so the way i would look at mojo today in may in twenty twenty three is that it's like a zero point one so i think that you know a year from now it's gonna be way more interesting to a variety of people but what we're doing is we're we decided to release it early so that people can get access to it and play with it and we can build with community we have a big road map fully published being transparent about this and a lot of people are involved in this stuff and so what we're doing is we're really optimizing for building this thing the right way mhmm and building it the right way is kind of interesting working with the community because everybody wants it yesterday and so it's it's sometimes it's kind of you know there's some dynamics there but yeah it's i think it's the good it's the right thing so there's a discord also so the dynamics is pretty interesting yeah sometimes the community probably can be very chaotic and introduce a lot of stress guido famously quit over the stress of the walrus operator i mean yeah you know it broke it broke broke the camel's back exactly and so like it could be very stressful as you to develop but can you just a tangent upon a tangent is it stressful to to to work through the design of various features here given that the community is so recently involved well so so i've been doing open development and community stuff for decades now somehow this has happened to me so i've i've learned some tricks but the the thing that always gets me is i wanna make people happy mhmm right and so this this is maybe not all people all happy all the time but yeah generally i want i want people to be happy right and so the challenge is that again we're tapping into some long some deep seated long tensions and pressures both in the the python world but also in the ai world in the hardware world and things like this and so people just want us to move faster right and so again our decision was let's release this early let's get people used to it or access to it and play with it and like let's let's build in the open which we could've you know had the the language monk sitting in the cloister up on the hilltop like beavering away trying to build something but in my experience you get something that's way better if you work with the community right and so yes it can be frustrating it can be challenging for lots of people involved and you know if you i mean if you mentioned our discord we have over ten thousand people on the discord eleven thousand people or something keep in mind we released mojo like two weeks ago yeah so it's very active so it's very cool but what that means is that you know ten eleven thousand people all will want something different right and so what we've done is we've tried to say okay cool here's our roadmap here here and the roadmap isn't completely arbitrary it's based on here's the logical order in which to build these features or add add these capabilities and things like that and what we've done is we've spun really fast on like bug fixes and so we actually have very few bugs which is cool i mean actually for a project in the state but then what we're doing is we're dropping in features very deliberately i mean this is fun to watch because you got the two gigantic communities of like hardware like systems engineers and then you have the machine learning python people that are like higher level yeah and it's just too like like army like they they they've been at war yeah they've been at war right and so so here here's here's the test tolkien novel or something okay so here's the test again like it's it's super funny for for something that's only been out for two weeks right people are so impatient right but okay cool let's fast forward a year mhmm like in a year's time mojo will be actually quite amazing and solve tons of problems and be very good people still have these problems mhmm right and so you you you look at this and you say and the way i look at this at least is to say okay well we're solving big long standing problems to me i again working on many different problems i wanna make sure we do it right right there's like a responsibility you feel because if you mess it up right there's very few opportunities to do projects like this and have them really have impact on the world if we do it right then maybe we can take those feuding armies and actually heal some of those wounds yeah this is like this feels this feels like a speech by george washington or abraham lincoln or something and and you look at this it's like okay well how different are we yeah we we all want beautiful things we all want something that's nice we we all wanna be able to work together we all want our stuff to be used right and so if we can help heal that now i'm not optimistic that all people will use mojo and they'll stop using c plus plus like that's not my goal right but but if we can heal some of that i think that'd be pretty cool yeah that'd be nice and we start by putting the people who like braces into the gulag no so so so there are proposals for adding braces to mojo and we just tell them we tell them no okay politely yeah anyway so there's a a lot of amazing features on the road map and those are already implemented it'd be awesome if you i could just ask you a few things yeah go for so the the other performance improvement comes from immutability so what's the what's this var and this let thing that we got going on what's the what's immutability yeah so one of the things that is useful and it's not always required but it's useful is knowing whether something can change out from underneath you right and so in python you have a pointer to an array right and so you pass that pointer to an array around to things if you pass into a function they may take that and scrolled away in some other data structure mhmm and so you get your array back and you go to use it now somebody else is like putting stuff in your array yeah how do you reason about that it gets to be very complicated and leaves lots of bugs right and so one of the things that you know again this is not something mojo forces on you but something mojo enables is a thing called value semantics and what value semantics do is they take collections like arrays like dictionaries also tensors and strings and things like this that are much higher level and make them behave like proper values and so it makes it look like if you pass these things around you get a logical copy of all the data mhmm and so if i pass you an array it's your array you can go do what you want to it you're not gonna hurt my array now that is an interesting and very powerful design principle it defines away a ton of bugs you have to be careful to implement it in an efficient way is there a performance hit that's significant generally not if you implement it the right way but it requires a lot of very low level getting the language right bits i i assume that'd be a huge performance hit because it's a really the benefit is really nice because you don't get into absolutely well well the the trick is is you can't do you can't do copies so you have to provide the behavior of copying without doing the copy yeah how do you do that is that how do you do that it's not magic it's just it's it's actually pretty cool well so first before we talk about how that works let's talk about how it works in python right so in python you define a person class or maybe a person class is a bad idea you define a database class right and database class has an array of records something like that right and so the problem is is that if you pass in a record or a class instance into the database it'll take a hold of that object and then it assumes it has it mhmm and if you're passing an object in you have to know that that database is gonna take take it and therefore you shouldn't change it after you put it in the database right this is this is you just kinda have to know that you just have to kinda know that right and so you roll out version one of the database you just kinda have to know that of course lex uses its own database right yeah right because you built it you understand how this works right somebody else joins the team they don't know this yes right and so now they suddenly get bugs you're having to maintain the database you shake your fist mhmm you argue the tenth time this happens you're like okay we have to do something different right and so what you do is you go change your python code and you change your database class to copy the record mhmm every time you add it and so what ends up happening is you say okay i will do what's called a defensive copy inside the database and then that way if somebody passes something in i will have my own copy of it and they can go do whatever and they're not gonna break my thing k this is usually the the two design patterns if you look in pytorch for example this is cloning a tensor like there's a specific thing and you have to know where to call it and if you don't call in the right place you get these bugs and this is state of the art right so a different approach so it's used in many languages so i've worked with it in swift is you say okay well let's provide value semantics and so we wanna provide the view that you get a logically independent copy mhmm but we wanna do that lazily and so what what we do is we say okay if you pass something into a function it doesn't actually make a copy what it actually does is it just increments a reference to it and if you pass it around you stick in your database it can go in the database you own it and then you come back out of the stack nobody's copied anything you come back out of the stack and then the caller lets go of it well then you've just handed it off to the database you've transferred it and there's no copies made now on the other hand if you know your coworker goes and hands you a record and you pass it in you stick it in the database and then you go to town and you start modifying it what happens is you get a copy lazily on demand and so what this does is gives you copies only when you need them and it also so it defines away the bugs but also generally reduces the number of copies in practice and so but the implementation details is tricky here as soon as it does so this is yes something with reference counting but to make it performant across a number of different kinds of objects yeah well so you need a couple of things and so there's many so this concept has existed in many different worlds and so it's a again it's not novel research at all right the magic is getting the design right so that you can do this in a reasonable way right and so there's a number of components that go into this one is when you're passing around so you we're talking about python and reference counting at the expense of doing that when you're passing values around you don't wanna do extra reference counting for no good reason mhmm and so you have to make sure that you're efficient and you transfer ownership instead of duplicating references and things like that which is a very low level problem you also have to adopt this and you have to build these data structures and so if you say you know mojo has to be compatible with python so of course the default list is a reference semantic list that works the way you'd expect in python but then you have to design a value semantic list and and so you just have to implement that and then you implement the logic within and so the the role of the language here is to provide all the low level hooks that allow the author of the type to be able to get and express this behavior without forcing it into all cases or hard coding this into the language itself but there's a ownership so you you're you're constantly transfer you're tracking who owns the thing yes and so there's a whole system called ownership and so this is related to work done in the rust community also the swift community has done a bunch of work and there's a bunch of different other languages that have all kind of c plus plus actually has copy constructors and destructors and things like that and so and i mean c plus plus has everything so it has move constructors it has like this whole world of things and so this is this is a body of work that's kind of been developing for many many years now and so mojo takes some of the best ideas out of all these systems and remixes in a nice way so that you get the power of something like the rust programming language but you don't have to deal with it when you don't want to which is a major thing in terms of teaching and learning and being able to use and scale these systems how does that play with argument conventions what are they why are they important how does the value semantics how does the transfer ownership work with with the arguments when they're passed into functions so so if you go deep into systems programming land so this isn't again this is not something for everybody but if you go deep into systems programming land what you encounter is you encounter these types that get weird so if you're used to python you think about everything i could just copy it around i can go change it and mutate it and do these things and it's all cool if you get into systems programming land you get into these things like i have an atomic number or i have a mutex or i have a uniquely owned database handle things like this right so these types you can't necessarily copy sometimes you can't necessarily even move them to a different address and so what mojo allows you to do is it allows you to express hey i i don't wanna get a copy of this thing i wanna actually just get a reference to it it and by doing that what you can say is you can say okay if i'm defining something weird like a you know atomic number or something it's like it has to be so so an so an atomic number is a an area in memory that multiple threads can access at a time without synchronous without without locks right and so and so like the definition of atomic numbers multiple different things have to be poking it that therefore they have to agree on where it is right so you can't just like move it out from underneath one because it kinda breaks what what it means and so that's that's an example of a type that you can't even you can't copy you can't move it like once you create it it has to be where it was right now if you look at many other examples like a database handle right so okay well what happens how do you copy a database handle do you copy the whole database that's not something you necessarily wanna do the there's a lot of types like that where you wanna be able to say that they are uniquely owned so there's always one of this thing and or if if i create a thing i i don't copy it mhmm and so what mojo allows you to do is it allows you to say hey i wanna pass around a reference to this thing without copying it and so it has borrowed conventions so you can say you can use it but you don't get to change it you can pass it by mutable reference and so if you do that then you can you get a reference to it but you can change it and so it manages all that kind of stuff so it's it's just a really nice implementation of like a c plus plus has yeah you know the reference kinds of pointers yeah it has pointers smart smart different different kinds of applications and smart pointers that you can explicitly define this allows you but you're saying that's more like the weird case versus the common case well it depends on where i mean i mean i i don't i don't think i'm a normal person so yes i mean i'm the one to call other people weird yeah but the but you know if you talk to a normal python a typical python programmer you're typically not thinking about this right this is a lower level of abstraction now if you talk to a c plus plus programmer certainly if you talk to a rust programmer again they're not weird they're delightful like these are all good people right those those folks will think about all the time right and so i i look at this as there's a spectrum between very deep low level systems i'm gonna go poke the bits and care about how they're laid out in memory all the way up to application and scripting and other things like this and so it's not that anybody's right or wrong it's about how do we build one system that scales by the way the the idea of an atomic number has been something that always brought me deep happiness because the flip side of that the the idea that threads can just modify stuff asynchronously so the whole idea of concurrent programming is a source of infinite stress for me well so this is where you jump into you know again you zoom out and and get out of programming languages or compilers and you just look what the industry has done my my mind is constantly blown by this right and you look at what you know moore's law moore's law has this idea that like computers for a long time single thread performance just got faster and faster and faster and faster for free but then physics and other things intervened in power consumption like other things started to matter and so what ended up happening is we went from single core computers to multi core then we went to accelerators right and this this trend towards specialization of hardware is only gonna continue and so for years us programming language nerds and compiler people have been saying okay well how do we tackle multicore right for a while it was like multicore is the future we have to get on top of this thing then it was multicore's the default what are we doing with this thing and then it's like there's chips with hundreds of cores in them what what what happened right yeah and so i'm super inspired by the fact that you know on the face of this you know those machine learning people invented this idea of a tensor mhmm right and what is a tensor a tensor is an like an arithmetic and algebraic concept it's like an abstraction around a gigantic parallelizable data set right and because of that and because of things like tensorflow and pytorch we're able to say okay well express the math of the system mhmm this enables you to do automatic differentiation this enables you to do like all these cool things and and it's it's an abstract representation because you have that abstract representation you can now map it onto these parallel machines without having to control okay put that byte here put that byte there put that byte there and this has enabled an explosion in terms of ai compute accelerators like all the stuff and so that's super super exciting what about the the deployment the execution across multiple machines yeah so you write that the modular compute platform dynamically partitions models with billions of parameters and distributes their execution across multiple machines enabling unparalleled efficiency by the way the the use of unparalleled in that sentence anyway enabling unparalleled efficiency scale and the reliability for the largest workloads so how how do you do this abstraction of distributed deployment of of of large models yeah so one one of the really interesting tensions so there's a whole bunch of stuff that goes into that i'll pick a random walk through if you if you go back and replay the history of machine learning right i mean the brief the brief most recent history of machine learning because this is as you know a very deep yeah i i knew lex when he had an ai podcast yes right yep so so if you look at just tensorflow and pytorch which is pretty recent history in the big picture right but tensorflow is all about graphs pytorch i think pretty unarguably ended up winning and why did it win mostly because of usability mhmm right and the usability of pytorch is i think huge and i think again that's a huge testament to the power of taking abstract theoretical technical concepts and bringing it to the masses right now the challenge with what the tensorflow versus the pytorch design points was that tensorflow is kinda difficult to use for researchers but it was actually pretty good for deployment pytorch is really good for researchers it kind of is not super great for deployment right and so i think that we as an industry have been struggling and if you look at what deploying a machine learning model today means is that you'll have researchers who are i mean wicked smart of course but they're wicked smart at model architecture and data and calculus and they called like they're wicked smart in various domains they don't wanna know anything about the hardware or deployment or c plus plus or things like this right and so what's happened is you get people who train the model they throw over throw it over the fence and they have people that try to deploy the model well every time you have a team a does x they throw it over the fence and team y does some team b does y like you have a problem because of course it never works the first time and so you throw over the fence they figure out okay it's too slow won't fit doesn't use the right operator the tool crashes what whatever the problem is then they have to throw it back over the fence and every time you throw a thing over a fence it takes three weeks of project managers and meetings and things like this and so what we've seen today is that getting models into production can take weeks or months like it's not atypical right i talk to lots of people and you talk about like vp of software at some internet company trying to deploy a model and and like why do i need a team of forty five people i got it's so easy to train a model why why can't i deploy it right and if you dig into this every layer is problematic so if you look at the language piece i mean this is tip of the iceberg it's a very exciting tip of the iceberg for folks but you've got python on one side and c plus plus on the other side python doesn't really deploy i mean it can theoretically technically in some cases but often a lot of production teams will wanna get things out of python because they get their performance and control and whatever else so mojo can help with that if you look at serving so you talk about gigantic models well a gigantic model won't fit on one machine right and so now you have this model it's written in python it has to be rewritten in c plus plus now it also has to be carved up so that half of it runs on one machine half of it runs on another machine or maybe it runs on ten machines well so now suddenly the complexity is exploding right and the reason for this is that if you if you look into tensorflow pytorch these systems they weren't really designed for this world right they were designed for you know back in the day when we were starting and doing things where it was a different much simpler world like you want to run resnet fifty or some ancient model architecture like this it was just a it was a completely different world than train on one gpu exactly doing on one gpu yeah alexnet right and the major breakthrough and and the world has changed right and so now the challenge is is that tensorflow pytorch systems they weren't actually designed for llms like that that was not that was not a thing and so what where tensorflow actually has amazing power in terms of scale and deployment and things like that and i think google is i mean maybe not unmatched but they're like incredible in terms of their capabilities and and gigantic scale many researchers using pytorch right and so pytorch doesn't have those same capabilities and so what modular can do is it can help with that now if you take a step back and say like what is modular doing right so modular has like a a bitter enemy that we're fighting against in the industry and it's one of these things where everybody knows it but nobody is usually willing to talk about it the bitter enemy the bitter thing that we have to destroy yeah that we're all struggling with and it's like all around it's like fish can't see water mhmm is complexity sure yes it's complexity right that was very close off of you it's very sad and so if you look at it yes it is on the hardware side yes all these all these accelerators all these software stacks that go with the accelerator all these like there's massive complexity over there you look at what's hap happening on the modeling side massive amount of complexity like things are changing all the time people are inventing turns out the research is not done right and so people wanna be able to move fast transformers are amazing but there's a ton of diversity even within transformers and what's the next transformer right and you look into serving mhmm also huge amounts of complexity it turns out that all the cloud providers right have all their very weird but very cool hardware for networking all this kind of stuff and it's all very complicated people aren't using that you look at classical serving right there there's this whole world of people who know how to write high performance servers with zero copy networking and like all all this fancy asynchronous io and like all these fancy things in the in in the serving community very little of that has pervaded into the machine learning world mhmm right and why is that well it's because again these systems have been built up over many years they they haven't been rethought there hasn't been a first principles approach to this and so what modular is doing is we're saying okay we've built many of these things right so i've worked on tensorflow and tpus and things like that other folks on our team have like worked on pytorch core we've worked on onnx one time we've worked on many of these other systems and so built systems like the apple accelerators and all that kind of stuff like our team is quite amazing and so one of the things that roughly everybody at modular is grumpy about is that when you're working on one of these projects you have a first or a goal mhmm get the hardware to work get the system to enable one more model get this product out the door enable the specific workload or make it solve this problem for this this product team right and nobody's been given a chance to actually do that step back and so we as an industry we didn't take two steps forward we took like eighteen steps forward in terms of all this really cool technology across compilers and systems and runtimes and heterogeneous computing like all this kind of stuff and like all this technology has been you know i wouldn't say beautifully designed but it's been proven in different quadrants mhmm like you know you look at google with tpus massive huge exaflops of compute strapped together in into machines that researchers are programming in python in a notebook that's huge that's amazing that's incredible right it's incredible and so you look at the technology that goes into that and the the algorithms are actually quite general and so lots of other hardware out there and lots of other teams out there don't have the sophistication or the maybe the the years working on it or the the budget or whatever that google does right and so they should be getting access to the same algorithms but they just don't have that right and so what modular is doing is we're saying cool this is not research anymore like we've we've built auto tuning in many systems we've built programming languages right and so like have have you know implemented c plus plus have implemented swift have implemented many of these things and so you know this it it's hard but it's not research and you look at accelerators well we know there's a bunch of different weird kind of accelerators but they actually cluster together right and you look at gpus well there's a couple of major vendors of gpus and they maybe don't always get along but their architectures are very similar you look at cpus cpus are still super important for the deployment side of things and you see new new architectures coming out from all the cloud providers and things like this and they're all super important to the world right but they don't have the thirty years of development that the entrenched people do right and so what modular can do is we're saying okay all this complexity like it's not it's not bad complexity it's actually innovation right and so it's innovation that's happening and it's for good reasons but i have sympathy for the poor software people right i mean again i'm a generally software person too i love hardware but software people wanna build applications and products and solutions that scale over many years they don't wanna build a solution for one generation of hardware with one vendor's tools right and because of this they need something that scales with them they need something that works on cloud and mobile mhmm right because you know their product manager said hey i want it to be have lower latency and it's better for personalization or whatever they decide right products evolve and so the challenge with the machine learning technology and the infrastructure we have today in the industry is that it's all these point solutions mhmm and because there are all these point solutions it means that as your product evolves you have to like switch different technology stacks or switch to a different vendor and what that does is that slows down progress so basically a a lot of the things we've developed in those little silos for machine learning tasks you want to make that the first class citizen of a general purpose programming language that can then be compiled across all these kinds of hardware well so it's it's not really about a programming language i mean the programming language is a component of the mission mhmm right and the mission is our not literal but our joking mission is to save the world from terrible ai software excellent i love it so so you know if you look at this mission you need a syntax mhmm so that's you so yeah she needed a programming language right and and like we wouldn't have to build the programming language if if one existed mhmm right so if python was already good enough then cool we would've just used it right we're not just doing very large scale expensive engineering projects for the sake of it like it's to solve a problem right it's also about accelerators it's also about exotic numerics and bfloat16 sixteen and matrix multiplications and convolutions and like this this kind of stuff within the stack there are things like kernel fusion it's a esoteric but really important thing that leads to much better performance and much more general research hackability together right and that that's enabled by the asics that's enabled by certain hardware so it's like where's the dance between i mean there's several questions here like how do you add a piece of hardware to the stack yeah if a new piece of like if i have this genius invention of a specialized accelerator yeah how do i add that to the modular framework and also how does modular as a standard start to define the kinds of hardware that should be developed yeah so let me take a step back and talk about status quo k and so if you go back to tensorflow one pytorch one the this kind of time frame and these have all evolved and gotten way more complicated so let's go back to the the glorious simple days mhmm right these things basically were cpus and cuda mhmm and so what you do is you say go do a dense layer and a dense layer has a matrix multiplication in it right and so when you say that you say go do this big operation of matrix multiplication and if it's on a gpu kick off the cuda kernel if it's on a cpu go do like an intel algorithm or something like that with the intel mkl okay now that's really cool if you're either nvidia or intel right but then more hardware comes in right and and on one axis you have more hardware coming in on the other hand you have an explosion of innovation in ai mhmm and so what happened with both tensorflow and pytorch is that the explosion of innovation in ai has led to it's not just about matrix multiplication and convolution these things have now like two thousand different operators and on the other hand you have i don't know how many pieces of hardware out there are that are it's a lot k it's it's not it's not even hundreds it's probably thousands k and across all of edge and across like all all the different things that that are used at scale yeah exactly i mean also it's not just like yeah it's a handful everywhere yeah it's not a handful of tpu alternatives correct it's it's it's every every phone often with many different right chips inside of it from different vendors from like it's ai is everywhere it's a thing right why are they all making their own chips like why why is everybody making their own thing well so because was that a good thing first of all so chris's philosophy on hardware yeah right so my philosophy is that there isn't one right solution right and so i think that again we're at the end of moore's law specialization happens yeah if you if you're building if you're training gpt five you want some crazy supercomputer data center thingy if you're making a smart camera that runs on batteries you want something that looks very different if you're building a phone you want something that looks very different if you have something like a laptop you want something that looks maybe similar but a different scale right and so ai ends up touching all of our lives robotics right and like lots of different things and so as you look into this these have different power envelopes there's different trade offs in terms of the algorithms there's new innovations in sparsity and other data formats and things like that and so hardware innovation i think is a really good thing right and what i'm interested in is unlocking that innovation there's also like analog and quantum and like although the the the really weird stuff right mhmm and so if somebody can come up with a chip that uses analog computing and it's a hundred x more power efficient think what that would mean in terms of the daily impact on the products we use that'd be huge now if you're building an analog computer you may not be a compiler specialist right these are different skill sets right and so you can hire some compiler people if you're running a big company maybe but it turns out these are really like exotic new generation of compilers like this this is a different thing right and so if you if you take a step back out and come back to what is the status quo status quo is that if you're intel or you're nvidia you continue you keep up with the industry and you chase and okay there's nineteen hundred now there's two thousand now there's two thousand one hundred and you have a huge team of people that are like trying to keep up and tune and optimize and even when one of the big guys comes out with a new generation of their chip they have to go back and rewrite all these things right so really it's only powered by having hundreds of people that are all like frantically trying to keep up and what that does is that keeps out the little guys and sometimes the not so little guys the big guys that are also just not not in those dominant positions and so and so what has been happening and so a lot of you talk about the rise of new exotic crazy accelerators is people have been trying to turn this from a let's go write lots of special kernels problem into a compiler problem mhmm and so we and i contributed to this as well we we as an industry went into it like let's go make this compiler problem phase let's call it and much of the industry is still in this phase by the way so it's i wouldn't say this phase is over and so the idea is to say look okay what a compiler does is it provides a much more general extensible hackable interface for dealing with the general case mhmm right and so within machine learning algorithms for example people figured out that hey if i do a matrix multiplication and i do a relu right the classic activation function it is way faster to do one pass over the data and then do the relu on the output where i'm writing out the data because relu is just a maximum operation right max is zero and so i it's an amazing optimization take matmul relu squished together in one operation now i have matmul relu well wait a second if i do that now i just went from having you know two operators to three but now i figure out okay well there's a lot of activation functions what about leaky value what about like like a million things that are out there right and so as i start fusing these in now i just get permutations of all these algorithms right right and so what the compiler people said is they said hey cool well i will go enumerate all the algorithms and i will enumerate all the pairs and i will actually generate a kernel for you mhmm and i think that this has been very very useful for the industry this is one of the things that powers google tpus pytorch two's like rolling out really cool compiler stuff with triton this other technology and things like this and so the compiler people are kind of coming into their fore and saying like awesome this is a compiler problem we'll compiler it here's the problem not everybody's a compiler person i love compiler people trust me right but not everybody can or should be a compiler person it turns out that they're people that know analog computers really well or they know some gpu internal architecture thing really well or they know some crazy sparse numeric interesting algorithm that is the cusp of research but they're not compiler people and so one of the challenges with this new wave of technology trying to turn everything into a compiler is again it has excluded a ton of people and so you look at what does mojo do what does the modular stack do is it brings programmability back into this world like it enables i wouldn't say normal people but like a new you know a different kind of delightful nerd that that cares about numerics or cares about hardware or cares about things like this to be able to express that in the stack and extend the stack without having to actually go hack the compiler itself so extend the stack on the on the algorithm side yeah and then on the hardware side yeah so again go back to like the simplest example of int right and so what both swift and mojo and other things like this did is we said okay pull magic out of the compiler and put it in the standard library right and so what modular is doing with the engine that we're providing and like this this very deep technology stack right which goes into heterogeneous run times and like a whole bunch of really cool really cool things this this whole stack allows that stack to be extended and hacked and changed by researchers mhmm and by hardware innovators and by people who know things that we don't know because you know modular has some smart people but we don't have all the smart people it turns out right what are heterogeneous run times yeah so so what what is heterogeneous right so heterogeneous just means many different kinds of things together mhmm and so the simple simplest example you might come up with is a cpu and a gpu mhmm and so it's a simple heterogeneous computer to say i will run my data loading and preprocessing and other algorithms on the cpu and then once i get it into the right shape i shove it into the gpu i do a lot of matrix multiplications and convolutions and things like this and i get it back out and i do some reductions and summaries and i shove it across the wire to across the network to another machine mhmm right and so you've got now what are effectively two computers a cpu and a gpu talking to each other working together in a heterogeneous system but that was ten years ago k you look at a a modern cell phone modern cell phone you've got cpus and they're not just cpus there's like big dot little cpus and so there's multiple different kinds of cpus that are kinda working together they're multicore you've got gpus you've you've got neural network accelerators you got dedicated hardware blocks for for media so for video decode and jpeg decode and things like this and so you've got this massively complicated system and this isn't just cell phones every laptop these days is doing the same thing and all of these blocks can run at the same time and need to be choreographed right and so again one of the cool things about machine learning is it's moving things to like data flow graphs and higher level of abstractions and tensors and these things that it doesn't specify here's how to do the algorithm it gives the system a lot more flexibility in terms of how to translate or map or compile it onto the system that you have and so what you need you know at the bottomest part of the layer there is a way for all these devices to talk to each other and so this is one thing that you know i'm very passionate about i i'm i mean you know i'm a nerd mhmm but but all these all these machines and all these systems are effectively parallel computers running at the same time sending messages to each other and so they're all fully asynchronous mhmm well this is actually a small version of the same problem you have in a data center mhmm right in a data center you now have multiple different machines sometimes very specialized sometimes with gpus or tpus in one node and sometimes with disks in another node so and so you get a much larger scale heterogeneous computer and so what ends up happening is you have this like multilayer abstraction of hierarchical parallelism hierarchical asynchronous communication and making that again the enemy my enemy is complexity by getting that away from being different specialized systems at every different part of the stack and having more consistency and uniformity i think we can help lift the world and make it much simpler and actually get used but how do you leverage like the strengths of the different specialized systems so we're looking inside the smartphone yeah and if like there's there's some what like i don't know five six computers essentially inside the smartphone how do you without trying to minimize the explicit yeah making it explicit which which computer is supposed to be used for which operation yeah so there there's there's a pretty well known algorithm and what you're doing is you're looking at two two factors you're looking at the factor of sending data from one thing to another mhmm right because it takes time to get it from that side of the chip to that side of the chip and things like this and then you're looking at what is the time it takes to do an operation on a particular block so take cpus cpus are fully general they can do anything right but but then you have a neural net accelerator that's really good at matrix multiplications k and so you say okay well if my workload is all matrix multiplications i start up i send the data over the neural net thing it goes and does matrix multiplications when it's done it sends me back the result all is good right and so the simplest thing is just saying do matrix do matrix operations over there right but then you realize you get a little bit more complicated because you can do matrix multiplications on a gpu you can do it on a neural net accelerator you can do it on cpu and they'll have different trade offs and costs and it's not just matrix multiplication and so what you actually look at is you look at i have generally a graph of compute i wanna do a partitioning i wanna look at the communication the bisection bandwidth and like the overhead and the sending of all these different things and and build a model for this and then decide okay it's an optimization problem where do i wanna place this compute so it's the old school theoretical computer science problem of scheduling and then how does presumably it's possible to somehow magically include auto tune into this absolutely so i mean in my opinion this is an opinion this is not not everybody would agree with this but in my opinion the world benefits from simple and predictable systems at the bottom that you can control but then once you have a predictable execution layer you can build lots of different policies on top of it right and so one policy can be that the human programmer says do that here do that here do that here do that here and like fully manually controls everything and the system should just do it right then you quickly get in the mode of like i don't wanna have to tell it to do it yeah and so the next logical step that people typically take is they write some terrible heuristic mhmm oh may if it's a major location do it over there or if it's floating point do it on the gpu if it's integer do it on the cpu like something like that right and and then you you then get into this mode of like people care more and more and more and you say okay well let's actually like make the heuristic better let's get into auto tune let's actually do search of the space to decide well what is actually better right well then you get into this problem where you realize this is not a small space this is a many dimensional hyperdimensional space that you cannot exhaustively search so do you know of any algorithms that are good at searching very complicated spaces for don't tell me you're gonna turn this into a machine learning problem so then you turn into a machine learning problem and then you have a space of genetic algorithms and reinforcement learning and like all all these all these complex include that into the stack into the into the module stack yeah yeah and so where does it sit where does it live is it a separate thing or is it part of the compilation so you start from simple and predictable models and so you can have full control and you can have coarse grain knobs that like nudge nudge systems so you don't have to do this but if you really care about getting the best you know the last ounce out of a problem then you can use additional tools and there the cool thing is you don't want to do this every time you run a model you want to figure out the right answer and then cache it and once you do that you can get you can say okay cool i can get up and running very quickly i can get good execution out of my system i can decide if something's important and if it's important i can go through a bunch of machines at it and do a big expensive search over the space using whatever technique i feel like it's really up to the problem and then when i get the right answer cool i can just start using it right and so you can get out of this this trade off between okay am i gonna like spend forever doing a thing or do i get up and running quickly and is the quality result like these these are actually not in contention with each other if the system's designed to scale you started and did a little bit of a whirlwind overview of how you get thirty five thousand x speed up or more over python jeremy howard did a really great presentation about sort of the basic like look at the code here's how you get the speed up like you said that's something we could probably developers can do for for their own code to see how you can get this gigantic speed up but can you maybe speak to the machine learning task in general how do how do you make some of this code fast and specifics like what would you say is the main bottleneck for machine learning tasks so are we talking about matrix multiplication how do you make that fast so i mean if you just look at the python problem right you can say how do i make python faster and there's been a lot of people that have been working on the okay how do i make python two x faster ten x faster or something like that right and there have been a ton of projects in that vein right mojo started from the what can the hardware do like what is the limit of physics yeah what is the speed of light what is it yeah like how fast can this thing go and then how do i express that yeah right and so it wasn't it wasn't anchored relatively on make python a little bit faster it's saying cool i know what the hardware can do let's unlock that right now when you and just say how how gutsy that is to be in the meeting and as opposed to trying to see how do we get the improvement it's like what can the physics do i mean maybe i'm a special kind of nerd but you look at that what is the limit of physics how fast can these things go right when you start looking at that typically it ends up being a memory problem mhmm right and so today particularly with these specialized accelerators the problem is that you can do a lot of math within them but you you get bottleneck sending data back and forth to memory whether it be local memory or distant memory or disk or whatever it is and and that that bottleneck particularly as the training sizes get large as you start doing tons of inferences all all over the place like that becomes a huge bottleneck for people right so again what happened is we went through a phase of many years where people took the special case and hand tuned it and tweaked it and tricked it out and they knew exactly how the hardware worked and they knew the model and they made it they made it fast didn't generalize and so you can make you know resnet fifty or some or alexnet or something inception v one like you can you can do that right because the models are small they fit in your head right but as the models get bigger more complicated as the machines get more complicated it stops working right and so this is where things like kernel fusion come in so what is kernel fusion this is this idea of saying let's avoid going to memory and let's do that by building a new hybrid kernel and a numerical algorithm that actually keeps things in the accelerator instead of having to write it all the way out to memory right what's happened with with these accelerators now is you get multiple levels of memory like in a gpu for example you'll have global memory and local memory and like all these things if you zoom way into how hardware works the register file is actually a memory so the registers are like an l zero cache and so a lot of taking advantage of the hardware ends up being fully utilizing the full power in all of its capability and this has a number of problems right one of which is again the complexity of disaster right there's too much hardware even if you just say let's look at the chips from one line of vendor like apple or intel or whatever it is each version of the chip comes out with new features and they change things so that it takes more time or less time to do different things and you can't rewrite all the software whenever a new chip comes out right and so this is where you need a much more scalable approach and this is what mojo and what the modular stack provides is it provides this infrastructure and the system for factoring all this complexity and then allowing people to express algorithms you talk about auto tuning for example express algorithms in a more portable way so that when a new chip comes out you you don't have to rewrite it all so to me like you know i i kinda joke like what is a compiler well there's many ways to explain that you convert thing a into thing b and you convert source code to machine code like you you can talk about many many things that compilers do but to me it's about a bag of tricks it's about a system and a framework that you can hang complexity it's a system that can then generalize and it can work on problems that are bigger than fit in one human's head right and so what that means what a good stack and what the mod modular stack provides is the ability to walk up to it with a new problem and it'll generally work quite well and that's something that a lot of machine learning infrastructure and tools and technologies don't have typical state of the art today is you walk up particularly if you're deploying if you walk up with a new model you try to push it through the converter and the converter crashes mhmm that's crazy the state of ml tooling today is not anything that a c programmer would ever accept right and it's always been this kind of flaky set of tooling that's never been integrated well and it's been never worked together and because it's not designed together it's built by different teams it's built by different hardware vendors it's built by different systems it's built by different internet companies that are trying to solve their their problems right and so that means that we get this fragmented terrible mess of complexity so i mean the specifics of and like jeremy showed this yeah there's the vectorized function which i guess is built in to the into mojo vectorized as you showed is built into the library into the library instead of the library yeah vectorize parallelize yep which vectorizes more low level parallelizes higher level there's the tiling thing which is how he demonstrated the auto tune i think so so think of think about this in like levels hierarchical levels of abstraction mhmm right and so at at the very if you zoom all the way into a compute problem you have one floating point number mhmm right and so then you say okay i wanna be i can do things one at a time in an interpreter it's pretty slow right so i can get to doing one one at a time in a compiler i can see then i can get to doing four or eight or sixteen at a time with vectors that's called vectorization then you can say hey i have a whole bunch of different you know what what a multicore computer is is it's basically a bunch of computers right so they're all independent computers that they can talk to each other and they share memory and so now what parallelize does is it says okay run multiple instances of this on different computers and now they can all work together on problem right and so what you're doing is you're saying keep going out to the next level out and and as you do that how do i take advantage of this so tiling is a memory optimization right it says okay let's make sure that we're keeping the data close to the compute part of the problem instead of sending it all back and forth through memory every every time i i load a block and the size of the block size is is all that's how you get to the auto tune to make sure it's optimized yeah well so all of these the details matter so much to get good performance this is another funny thing about machine learning and high performance computing that is very different than c compilers we all grew up grew up with where you know if you get a new version of gcc or a new version of clang or something like that you know maybe something will go one percent faster right and so compiler engineers will work really really really hard to get half a percent out of your c code something like that but when you're talking about an accelerator or an ai application or you're talking about these kinds of algorithms you know these are things people used to write in fortran for example right if you get it wrong it's not five percent or one percent it could be two x or ten x right if you think about it you really want to make use of the full memory you have the cache for example but if you use too much space it doesn't fit in the cache now you're gonna be thrashing all the way back out to main memory and these can be two x ten x major performance differences and so this is where getting these magic numbers and these things right is really actually quite important so you mentioned that mojo is a superset of python can you run python code as if it's mojo code yes yes so and so and this has two sides of it so mojo is not done yet so i'll give you a disclaimer mojo is not done yet but already we see people that take small pieces of python code move it over they don't change it and you can get twelve x speed ups mhmm like somebody was just tweeting about that yesterday which is pretty cool right and again interpreters compilers right and so without changing any code without also this is not with this is not jit compiling or doing any anything fancy this is just basic stuff move it straight over now mojo will continue to grow out and as it grows out it will have more and more and more features and our north stars to be a full superset of python and so you can bring over basically arbitrary python code and have it just work and it may not always be twelve x faster but but it should be at least as fast and way faster in many cases is the goal right now it'll take time to do that and python is a complicated language there's not just the obvious things but there's also non obvious things that are complicated like we have to be able to talk to cpython packages to talk to the capi and there's there's a bunch of there's a bunch of pieces to so you have to i mean just to make explicit the obvious that may not be so obvious until you think about it so you know to run python code that means you have to run all the python packages and libraries yeah yeah so that means what what's the relationship between mojo and cpython the the interpreter that's yep presumably would be tasked with getting those packages to work yep so in the fullness of time mojo will solve for all the problems and you'll be able to move pie python packages over and run them in mojo without the cpython without cpython someday yeah right so not today but someday and that'll be a beautiful day because then you'll get a whole bunch of advantages and you'll get massive speed ups and things like this so you can do that one at a time right you can move packages one at a time exactly but but we're not willing to wait for that python is too important the ecosystem is too broad we wanna both be able to build mojo out we also wanna do it the right way without time like in without intense time pressure we're obviously moving fast but and so what we do is we say okay well let's make it so you can import an arbitrary existing package arbitrary including like you write your own on your local disk or whatever it's not it's not like a standard pack like an arbitrary package and import that using cpython because cpython already runs all the packages right and so what we do is we built an integration layer where we can actually use cpython again practical and to actually just load and use all the existing packages as they are the downside of that is you don't get the benefits of mojo for those packages mhmm right and so they run as fast as they do in the traditional cpython way but what that does is that gives you an incremental migration path and so if you say hey cool well here's a you know the python ecosystem is vast i want all of it to just work but there's certain things that are really important and so if i if i'm doing weather forecasting or something well i wanna be able to load all the data i wanna be able to work with it and then i have my own crazy algorithm inside of it well normally i'd write that in c plus plus if i can write in mojo and have one system that scales well that's way easier to work with is it hard to do that to to have that layer that's running cpython because is there some communication back and forth yes it's complicated i mean this this is what we do so i mean we make it look easy but it is it is complicated but what what we do is we use the cpython existing interpreter so it's running its own byte codes and that's how it provides full compatibility and then it gives us cpython objects mhmm and we use those objects as is and so that way we're fully compatible with all the cpython objects and all the the you know it's not just the python part it's also the c packages the c libraries underneath them because they're often hybrid and so we can fully run and we're fully compatible with all that and the way we do that is that we have to play by their rules right and so we we keep objects in that representation when they're coming from that world what's the representation that's being used in memory you'd have to know a lot about how the cpython interpreter works it has for example reference counting but also different rules on how to pass pointers around and things like this super low level fiddly and it's not like python it's like how the interpreter works okay and so that gets all exposed out and then you have to define wrappers around the low level c code right and so what this means is you have to know not only c which is a different world from python obviously not only python but the wrappers but the interpreter and the wrappers and the implementation details and the conventions and it's just this really complicated mess and when you do that now suddenly you have a debugger that debugs python they can't step into c code right so you have this two world problem right and so by pulling this all into mojo what you get is you get one world you get the ability to say cool i have untyped very dynamic beautiful simple code okay i care about performance for whatever reason right there's lots of reasons you could you you might care and so then you add types you can parallelize things you can vectorize things you can use these techniques which are general techniques to solve a problem and then you can do that by staying in the system and if you're you have that that one python package that's really important to you you can move it to mojo you get massive performance benefits on that and that and other other advantages you know if you like stack types it's nice if they're enforced some people like that right rather than being hints so there's other advantages too and then and then you can do that incrementally as you go so one different perspective on this will be why mojo instead of making cpython faster redesigning cpython yeah well i mean you could argue mojo is redesigning cpython so yes but but why not make cpython faster and better and other things like that there's lots of people working on that so actually there's a team at microsoft that is really improving i think c python three dot eleven came out in october or something like that and it was you know fifteen percent faster twenty percent faster across the board which is pretty huge given how mature python is and things like this and so that's awesome i love it doesn't run gpu it doesn't do ai stuff like it doesn't do vectors it doesn't do things twenty percent is good thirty five thousand times is better right so like the the they're they're they're definitely i'm a huge fan of that work by the way and it composes well with what we're doing and so it's not it's not like we're fighting or anything like that it's actually just general it's goodness for the world but it's just a different path right and again we're not working forwards from making python a little bit better we're working backwards from what is the limit of physics what's the process of porting python code to mojo is there what's involved in that in the process is there tooling for that not yet so we're missing some basic features right now and so we're continuing to drop out new features like on a weekly basis but you know at at the fullness of time give us a year and a half maybe two years is it an automatable process so when when we're ready it'll be very automatable yes is it automatable automate like is it possible to automate in the general case the python to mojo conversion yeah well and then you're saying it's possible well so and this is why i mean among other reasons why we use tabs yes right so first of all by being a superset yep you it's it's like c versus c plus plus mhmm can you move c code to c plus plus yes yeah right and you move you you can move c code to c plus plus and then you can adopt classes you can add adopt templates you can adopt other references or whatever c plus plus features you want after you move c to c code to c plus plus like you can't use templates in c mhmm right and so if you leave it a c fine you can't use the cool features but it still works right and c and c plus plus could work together and so that's the analogy right now here right you you you there there's not a python is bad and the mojo is good right mojo just gives you superpowers right and so if you wanna stay with python that's cool but the tooling should be actually very beautiful and simple because we're doing the hard work of defining a superset right so you're right so there's there's several things to say there but also the conversion tooling should probably give you hints as to like how you can improve the code and then you yeah exactly once you're in the new world then you can build all kinds of cool tools to say like hey should you adopt this feature or like and we haven't built those tools yet but i fully expect those tools will exist and then you can like you know quote unquote modernize your code or however you wanna look at it right so i mean one of the things that i think is really interesting about mojo is that there have been a lot of projects to improve python over the years everything from you know getting python to run on the java virtual machine pypy which is a jit compiler there's tons of these projects out there that have been working on improving python in various ways they fall into one of two camps so pypy is a great example of a camp that is trying to be compatible with python even there not really it doesn't work with all the c packages and stuff like that but but they're trying to be compatible with python there's also another category of these things where they're saying well python is too complicated and you know i'm gonna cheat on the edges and you know like integers in python can be an arbitrary sized integer like if you care about it fitting in a going fast in a register in a computer that's really annoying right and so you can you can do choose two paths on that right you can say well people don't really use big integers that often therefore i'm gonna just not do it and it'll be fine not not a python superset or you can do the hard thing and say okay this is python you can't be a superset of python without being a superset of python and that's a really hard technical problem but it's in my opinion worth it right and it's worth it because it's not about any one package it's about this ecosystem it's about what python means for the world and it also means we don't wanna repeat the python two to python three transition like we want we want people to be able to adopt this stuff quickly and so by doing that work we can help lift people yeah the challenge it's really interesting technical philosophical challenge of really making a language a superset of another language it's breaking my brain a little bit well well it it paints you in the corners so again i'm very happy with python and so joking all joking aside i think that the annotation thing is not the actual important part of the problem yes right but the the fact that python has amazing dynamic metaprogramming features and they translate to beautiful static metaprogramming features i think is profound i think that's huge right and so python i i've talked with guido about this it's it's like it it was not designed to do what we're doing that was not the reason they built it this way but because they really cared and they were very thoughtful about how they designed the language it scales very elegantly in the space but if you look at other languages for example c and c plus plus right if you're building a superset you get stuck with the design decisions of the subset right and so you know c plus plus is way more complicated because of c and the legacy than it would have been if they would have theoretically designed a from scratch thing and there's lots of people right now that are trying to make c plus plus better and recent tax c plus plus is gonna be great we'll just change all the syntax but if you do that now suddenly you have zero packages you don't have compatibility so what what are the if you could just linger on that what are the biggest challenges of keeping that superset status what are the things you're struggling with is it all boiled down to having a big integer no i mean it's it's a it's a what are the other things like usually it's the it's the long tail of weird things so let let me give you a war story okay so war story in the space is you go way back in time project i worked on is called clang mhmm clang what it is is a c c plus plus parser right and when i started working on clang must've been like two thousand six or something was when i or two thousand seven two thousand six when i first started working on it right it's funny how time flies yeah yeah yeah the i started that project and i'm like okay well i wanna build a c parser c plus plus parser for llvm it's gonna be the word gcc is yucky you know this is me in earlier times it's yucky it's unprincipled it has all these weird features like all these bugs like it's yucky so i'm gonna build a standard compliant c and c plus plus parser it's gonna be beautiful it'll be amazing well engineered all the cool things an engineer wants to do and so i started implementing and building it out and building it out and building it out and then i got to include standard i o dot h mhmm and all of the headers in the world use all the gcc stuff mhmm k yeah this and so again come back away from theory back to reality right i had i was at a fork on the road i could have built an amazingly beautiful academic thing that nobody would ever use or i could say well it's yucky in various ways all these design mistakes accents of history the legacy at that point gcc was like over twenty years old which by the way yeah now lvm's over twenty years old yep right and so it's funny how yep time catch catches up to you right and so you you you say okay well what's what what is easier right i mean as an engineer it's it's actually much easier for me to go implement long tail compatibility weird features even if they're distasteful and just do the hard work and like figure it out reverse engineer it understand what it is write a bunch test cases like try to understand behavior it's way easier to do all that work as an engineer than it is to go talk to all c programmers and get argue with them and try to get them to rewrite their code yeah right and because that breaks a lot more things yeah and and you have realities like nobody actually even understands how the code works because it was written by the person who quit ten years ago right and so this this software is kind of frustrating that way but it's that's how the world works right yeah unfortunately it can never be this perfect beautiful thing well there there there are occasions in which you get to build like you know you invent a new data structure or something like that or there's this beautiful algorithm that just like makes you super happy and i i i love that moment but but when you're working with people yeah and you're working with code and dusty deck code bases and things like this right it's not about what's theoretically beautiful it's about what's practical what's real what people actually use and i don't meet a lot of people that say i wanna rewrite all my code just for the sake of it mhmm by the way there could be interesting possibilities and we'll probably talk about it where ai can help rewrite some code that might be farther out future but it's a really interesting one yeah how that could create more yeah be a a tool in the battle against this monster of complexity that you mentioned yeah you mentioned guido the the benevolent dictator for life of python what does he think about muju have you talked to him much about it i have talked with him about it he found it very interesting we actually talked with guido before it launched and so he was aware of it before it went public i have a ton of respect for guido for a bunch of different reasons you talk about walrus operator and commute like guido is pretty amazing in terms of steering such a huge and diverse community and and and like driving it forward and i think python is what it is thanks to him right and so to me it was really important starting to work on mojo to get his feedback and get his input and get his eyes on this right now a lot of what guido was is was and is i think concerned about is how do we not fragment the community yeah we don't want a python two to python three thing like that was that was really painful for everybody involved and so we spent quite a bit of time talking about that and some of the tricks i learned from swift for example so in in the migration from swift we managed to like not just convert objective c into a slightly prettier objective c which we did mhmm we then converted not entirely but almost an entire community to a completely different language right and so there's a bunch of tricks that you learn along the way that are directly relevant to what we do and so this is where for example the you leverage c python while bringing up the new thing like that that approach is i think proven and and comes from experience and so guido was very interested in like okay cool like i think the python is really his legacy it's his baby i have ton tons of respect for that incidentally i see mojo as a member of the python family we're not trying to take python away from guido and from the python community and so to me it's really important that we're a good member of that community and so yeah i think that again you you would have to ask guido this but i think that he's very interested in this notion of like cool python gets beaten up for being slow mhmm maybe there's a path out of that right and that you know if the future is python right i mean look look at the the the far outside case on this right and i'm not saying this is guido's perspective but you know there's this path of saying like okay well suddenly python can suddenly go all the places it's never been able to go before right and that means that python can go even further and can have even more impact on the world so in some sense mojo could be seen as python four point o i would not say that i think that would drive a lot of people really crazy because of the ptsd of the three point o two point i'm willing to annoy people about e max versus bim or but that's that's that one i don't know that might be a little bit far even for me like my my skin may not be that thick but but the the point is the step to being a superset and allowing all of these capabilities i think is the evolution of a language it feels like an evolution of a language so he he's interested by the ideas that you're playing with but also concerned about the fragmentation so how what are the ideas you've learned what are you thinking about how do we avoid fragmenting the community where the the the pythonistas and the i don't know what to call the mojo people magicians the magicians i like it there you go can coexist happily and and share code and basically just have these big code bases that are using cpython and more and more moving towards mojo well so again these are lessons i learned from swift and and here we face very similar problems right in swift you have objective c super dynamic they're very different syntax right but you you're talking to people who have large scale code bases i mean apple's got the biggest largest scale code base of objective c code right and so you know none of the companies none of the ios developers none of the other developers want to rewrite everything all at once and so you wanna be able to adopt things piece at a time and so a thing that i found that worked very well in the swift community was saying okay cool and this is when swift was very young and she say okay you have a million line of code objective c app don't rewrite it all but when you implement a new feature go implement that new class using swift mhmm right and so now this turns out is a very wonderful thing for an app developer but it's a huge challenge for the compiler team and the systems people that are implementing this right and this comes back to what is this trade off between doing the hard thing that enables scale versus doing the theoretically pure and ideal thing right and so swift adopted and built a lot of different machinery to deeply integrate with the objective c runtime and we're doing the same thing with python right now what what happened in the case of swift is that swift's language got more and more and more mature over time right and incidentally mojo is a much simpler language than swift in many ways and so i think that mojo will develop way faster than swift for a variety of reasons but as the language gets more mature in parallel with that you have new people starting new projects right and so if when the language is mature and somebody's starting a new project that's when they say okay cool i'm not dealing with a million lines of code i'll just start and use the new thing for my whole stack now the problem is again you come back to where communities and where people that work together you build new subsystem or new feature a new thing in swift or you build a new thing in mojo then you want to be in end up being used on the other side right and so then you need to work on integration back the other way and so it's not just mojo talking to python it's also python talking to mojo mhmm right and so what i would love to see and i don't wanna see this next month right but what i wanna see over the course of time is i would love to see people that are building these packages like you know numpy or you know tensorflow or what you know these packages that are half python half c plus plus and if you say okay cool i want to get out of this python c plus plus world into a unified world and so i can move to mojo but i can't give up all my python clients mhmm because they're like these libraries get used by everybody and they're not all gonna switch every all you know all at once and maybe never right well so the way we should do that is we should vend python interfaces to the mojo types mhmm and that's what we did in swift and it worked great i mean it was a huge implementation challenge for the compiler people right but there's only a dozen of those compiler people and there are millions of users and so it's a very expensive capital intensive like skill set intensive problem but once you solve that problem it really helps adoption it really helps the community progressively adopt technologies and so i think that this approach will work quite well with with the python and the mojo world so for a package port it to mojo and then create a python interface yep so how do just so when you're on these packages numpy pytorch and tensorflow yeah how do they play nicely together so is mojo supposed to be let's talk about the machine learning ones is mojo kind of visioned to replace pytorch or tensorflow to incorporate it what's what's the relationship in this alright so dance so take a step back so i wear many hats mhmm so you're you're you're angling it on the mojo side yes mojo is a programming language and so it can help solve the c c plus plus python view that's happening the the fire emoji got me i'm sorry we should be talking for modular yes yes yes okay so the fire emoji is amazing i love it it's it's a big deal the other side of this is the fire emoji is in service of solving some big ai problems yes right and so the big ai problems are again this fragmentation this hardware nightmare this this explosion of new potential but that's not getting felt by the industry right and so when you look at how does the modular engine help tensorflow and pytorch right it's not replacing them right in fact when i talk to people again they don't like to rewrite all their code you have people that are using a bunch of pytorch a bunch of tensorflow they have models that they've been building over the course of many years right and when i talk to them there's a few exceptions but generally they don't wanna rewrite all their code right and so what we're doing is we're saying okay well you don't have to rewrite all your code what happens is the modular engine goes in there and goes underneath tensorflow and pytorch it's fully compatible and it just provides better performance better predictability better tooling it's a better experience that helps lift tensorflow and pytorch and make them even better i love python i love tensorflow i love pytorch right this is about making the world better because we need ai to go further but if i have a process that trains a model and i have a process that performs inference on that model and i have the model itself what should i do with that in the long arc of history in terms of if i use pytorch to train it should i rewrite stuff in mojo would that if i care about performance oh so i mean again it it depends so if you're if you care about performance then writing it in mojo is gonna be way better than writing in python but if you look at if you look at llm companies for example mhmm so you look at openai rumored and you look at many of the other folks that are working on many of these many of these lms and other like innovative machine learning models on the one hand they're innovating in the data collection and the model billions of parameters and the model architecture and the rl hf and the the the like all the all the cool things that people are talking about but on the other hand they're spending a lot of time writing cuda kernels mhmm right mhmm and so you say wait a second how much faster could all this progress go if they were not having to hand write all these cuda kernels mhmm right and so there are a few technologies that are out there and people have been working on this problem for a while and and they're they're trying to solve subsets of the problem again kind of fragmenting the space and so what mojo provides for these kinds of companies is the ability to say cool i can have a unifying theory right and again this the the better together the unifying theory the the two world problem or the three world problem or the end world problem like the this is the thing that is slowing people down and so as we help solve this problem i think it'll be very helpful for making this whole cycle go faster so obviously we've talked about the transition from objective c to swift you've designed this programming language and you've also talked quite a bit about the use of swift for machine learning context why have you decided to move away from maybe an intense focus on swift for the machine learning context versus sort of designing a new programming language that happens to be a super simple saying this is an irrational set of life choices i make or what yeah did you go to the desert and did you meditate on it okay alright no it was bold it was bold and needed and i think i mean it's just bold and sometimes to take those leaps is is a difficult leap to take yeah well so okay i mean i think there's a couple of different things so actually i left apple back in twenty seventeen like january twenty seventeen so it's been a number of years that i left apple and the reason i left apple was to do ai k so and again i won't comment on apple and ai but the at the time right i wanted to get into and understand and understand the technology understand the applications the workloads and so i was like okay i'm gonna go dive deep into applied and ai and then the technology underneath it right i found myself at google and that was like when tpus were yep waking up exactly and so i found myself at google and jeff dean who's a rock star as you know right and the and in twenty seventeen tensorflow's like really taking off and doing incredible things and i was attracted to google to help them with the tpus right and tpus are an innovative hardware accelerator platform have now i mean i think proven massive scale and like done incredible things right and so one of the things that this led into is a bunch of different projects which i'll skip over right one of which was this swift for tensorflow project mhmm right and so that project was a research project and so the idea of that is say okay well let's look at innovative new programming models where we can get a fast programming language we can get automatic differentiation into language let's push the boundaries of these things in a research setting right now that project i think lasted two three years there's some really cool outcomes of that so one of one of the things that's really interesting is i published a talk at an llvm conference in twenty eighteen again that seems like so long ago about graph program abstraction which is basically the thing that's in pytorch two and so pytorch two is all this dynamo real thing it's all about this graph program abstraction thing from python bytecodes and so a lot of the research that was done ended up pursuing and going out through the industry and influencing things and i think it's super exciting and awesome to see that but the swift for test flow project itself did not work out super well and so there's a couple of different problems with that one of which is that you may have noticed swift is not python mhmm there's a few people that write python code yes and so it turns out that all of ml is pretty happy with python it's actually a problem that other programming languages have as well that they're not python we'll probably maybe briefly talk about julia was a very interesting beautiful programming language but it's not python exact well and so if and so like if you're saying i'm gonna solve a machine learning problem where all the programmers are python pro programmers yeah and you say the first thing you have to do is switch to a different language well your new thing may be good or bad or whatever but if it's a new thing the adoption barrier is massive it's still possible still possible yeah absolutely the world changes and evolves and there's definitely room for new new and good ideas but it just makes it so much harder right and so lesson learned swift is not python and people are not always in search of like learning a new thing for the sake of learning a new thing and if you wanna be compatible with all the world's code turns out meet the world where it is right second thing is that you know a lesson learned is that swift as a very fast and efficient language kind of like mojo but a different a different take on it still really worked well with eager mode and so eager mode is something that pytorch does and it proved out really well and it enables really expressive and dynamic and easy to debug programming tensorflow at the time was not set up for that let's say that was not the timing is also important in this world yeah yeah and tensorflow is a good thing and it has many many strengths but you could say swift for tensorflow is a good idea except for the swift and except for the tensorflow part so because it's not python and tensorflow because it's not it wasn't set up for eager mode at the time yeah it was one point o exactly and so one of so one of the things about that is in the context of it being a research project i'm very happy with the fact that we built a lot of really cool technology we learned a lot of things i think the ideas went on to have influence in other systems like pytorch a few people use that i hear right and so i think that's super cool and for me personally i learned so much from it right and i think a lot of the engineers that worked on it also learned a tremendous amount and so you know i think that that's just really exciting to see and and you know i'm sorry that the project didn't work out i wish it did of course right but but you know it's it's it's a research project and so you're there to learn from it but it's interesting to think about the evolution of programming as we come up with these whole new set of algorithms in machine learning in artificial intelligence and what's going to win out because it could be a new programming language yeah it could be i mean we i just mentioned julia i think there's a lot of ideas behind julia that mojo shares what what what are your thoughts about julia in general so i would i will have to say that when we launched mojo the one of the biggest things i didn't predict was the response from the julia community and so i was not i mean i'm i've okay let me take a step back i've known the julia folks for a really long time they were they're an adopter of llvm a long time ago they've been pushing state of the art in a bunch of different ways julia is a really cool system i had always thought of julia as being mostly a scientific computing focused environment right and and i thought that was its focus i neglected to understand that one of their missions is to like help make python work end to end and so i think that was my my error for not understanding that and so i could have been maybe more sensitive to that mhmm but but there's major differences between what mojo is doing what julia is doing so as you say julia is not python mhmm right and so one of the things that a lot of the julia people came out and said is like okay well if we put a ton of more energy and ten more money or engineering or whatever into julia maybe that would be better than starting mojo right well i mean maybe that's true but it still wouldn't make julia into python so if you work backwards from the goal of let's build something for python programmers without requiring them to relearn syntax then julia just isn't there right i mean that's a different thing right and so if you anchor on i love julia and i want julia to go further then you can you can look at it from a different lens but the lens we were coming at was hey everybody is using python python isn't syntax isn't broken let's take what's great about python and make it even better and so it was just a different starting point so i i think julia is a great language the community is a lovely community they are doing really cool stuff but it's just a different a slightly different angle but it does seem that python is quite sticky is there some philosophical almost thing you could say about why python by many measures seems to be the most popular programming language in the world well i can tell you things i love about it maybe that's one way to answer the question right so huge package ecosystem super lightweight and easy to integrate it has very low startup time so what startup time you mean like money curve or what yeah so if you if you look at certain other languages that you know you you say like go and just takes a like java for example takes a long time to jit compile all the things and and then the the vm starts up and the garbage collector kicks in and then it revs its engines and then it can plow through a lot of internet stuff or whatever right python is like scripting like it's it just goes right python has very low compile time mhmm like so you're not sitting there waiting python integrates into notebooks in a very elegant way that makes exploration super interactive and it's awesome right python is also it's like almost the glue of computing because it has such a simple object representation a lot of things plug into it that dynamic metaprogramming thing we were talking about also enables really expressive and beautiful apis right so there's lots of reasons that you can look at technical things that python has done and say like okay wow this is actually a pretty amazing thing and any one of those you can neglect people will all just talk about indentation and ignore like the fundamental things but then you also look at the community side right so python owns machine learning machine learning is pretty big yeah and it's growing and it's growing right and it's growing in importance right and so and there's a reputation and prestige to machine learning to where like if you're a new programmer you're thinking about like which programming language do i use well i should probably care about machine learning therefore let me try python and well kind of builds and builds and builds and and you even go go back before that like my kids learn python right not because i'm telling them to learn python but because were they rebelling against you or what oh no right well they they also learn scratch right and things like this too but it's because python is taught everywhere right because it's easy to learn right and because it's pervasive right and there there's that's my day we learned java and c plus plus yeah well uphill both directions but yes i guess python is the main language of teaching software engineering schools now yeah well and if you look at if you look at this there's these growth cycles right if you look at what causes things to become popular and then gain in popularity there's reinforcing feedback loops and things like this and i think python has done again again the whole community has done a really good job of building those growth loops and help propel the ecosystem and i think that again you look at what you can get done with just a few lines of code it's amazing so this kinda self building loop is interesting to understand because when you look at mojo what it stands for some of the features it seems sort of clear that this is a good direction for programming languages to evolve in the machine learning community but it's still not obvious that it will because of this whatever the engine of popularity of virality is there something you could speak to like how how do you get people to switch yeah well i mean i think that the the the the viral growth loop is to switch people to unicode yes i think the unicode file extensions are what i'm betting on i think that's gonna be the thing yeah tell the kids that you could use the fire emoji and they'd be like what exactly so well in in all seriousness like i mean i think there's really i'll give you two opposite answers mhmm one is i hope if it's useful if it solves problems and if people care about those problems being solved they'll adopt the tech mhmm right that's the that's kind of the simple answer and when you're looking to get tech adopted the question is is it solving an important problem people need solved and is the adoption cost low enough that they're willing to make the switch and cut over and do do the pain upfront so that they can actually do it right and so hopefully mojo will be that for a bunch of people and you know people building these hybrid packages are suffering it's really painful and so i think that we have a good shot of helping people but the other side is like it's okay if people don't use mojo like it's not my job to say like everybody should do this like i'm not saying python is bad like i hope python cpython like all these implementations because python ecosystem is not just cpython it's also a bunch of different implementations with different trade offs and this ecosystem is really powerful and exciting as are other programming languages it's not like typescript or something is gonna go away right and so it's not a there's not a winner take all thing and so i hope that mojo is exciting and useful to people but if it's not that's also fine but i also wonder what the the use case for why you should try mojo would be so practically speaking yeah it seems like so there's entertainment there's a dopamine hit of saying holy shit this is ten times faster this little piece of code is ten times faster in mojo out of the box before he gets to thirty five thousand exactly i mean just even that i mean that's the dopamine hit that every programmer sort of dreams of is the the optimization it's it's also the drug that can pull you in and have you waste way too much of your life optimizing and overoptimizing right but so what what do you see that would be like common this is very hard to predict of course but you know if you look ten years from now mojo's super successful yeah what do you think would be the thing where people like try it and then use it regularly and it kinda grows and grows and grows well so you talk about dopamine hit and so what again humans are not one thing and some people love rewriting their code and learning new things and throwing themselves in the deep end and trying out a new thing in my experience most people don't like they're too busy they have other things going on by number most people don't want like this i wanna rewrite all my code but even those people the two busy people the people that don't actually care about the language or just care about getting stuff done those people do like learning new things right and so you talk about the dopamine rush of ten x faster wow that's cool i wanna do that again well it's also like here's here's the thing i've heard about in a different domain and now i don't have to figure out all my code i can learn a new trick mhmm right well that's called growth you know and so and so one thing that i think is cool about mojo and again those will take a little bit of time for for example the blog posts and the books and like all that kind of stuff develop and the language needs to get further along but what we're doing you talk about types like you can say look you can start with the world you already know and you can progressively learn new things and adopt them where it makes sense if you never do that that's cool you're not a bad person if you if you get really excited about it and wanna go all the way in the deep end and rewrite everything and then like whatever that's cool right but i think the middle path is actually the more likely one where it's you know you you come out with a new a new idea and you discover wow that makes my code way simpler way more beautiful way faster way whatever and i think that's what people like now if you fast forward and you you said like ten years up mhmm right i can give you a very different answer on that which is i mean if you go back and look at what computers look like twenty years ago every eighteen months they got faster for free right two x faster every eighteen months it was like clockwork it was it was free right you go back ten years ago and we entered in this world where suddenly we had multicore cpus and we had gpus mhmm and if you squint and turn your head what a gpu is it's just a many core very simple cpu thing kind of right and so and ten years ago it was cpus and gpus and graphics today we have cpus gpus graphics and ai because it's so important because the compute is so demanding because of the smart cameras and the watches and all the different places the ai needs to to work in our lives it's caused this explosion of hardware and so part of my thesis part of my belief of where computing goes if you look out ten years from now is it's not gonna get simpler physics isn't going back to where we came from mhmm it's only gonna get weirder from here on out right and so to me the exciting part about what we're building is it's about building that universal platform which the world can continue to get weird because again i don't think it's avoidable it's physics but we can help lift people scale do things with it and they don't have to rewrite their code every time a new device comes out and i think that's pretty cool and so if mojo can help with that problem then i think that it will be hopefully quite interesting and quite useful to a wide range of people because there's so much potential and like there's so you know maybe analog computers will become a thing or something right and we need to be able to get into a mode where we can move this programming model forward but do so in a way where we're lifting people and and growing them instead of forcing them to rewrite all their code and exploding them do you think there'll be a a few major libraries that go mojo first well so i mean the modular engine's all mojo so i can't come back to like we're not building mojo because it's fun we're building mojo because we had to to solve these accelerators that's the origin story but i mean ones that are currently in python yeah so i think that a number of these projects will and so one one of the things and again this is just my best guess like each of the package maintainers also has i'm sure plenty of other things going on people don't like really don't like rewriting code just for the sake of rewriting code but sometimes like people are excited about like adopting a new idea yeah and it turns out that while rewriting code is generally not people's first thing turns out that redesigning something while you rewrite it and using a rewrite as an excuse to redesign can lead to the two dot o of your thing that's way better than the one dot o mhmm right and so i i have no idea i can't predict that but there's a lot of these places where again if you have a package that is half c and half python right just solve the pain make it easier to move things faster make it easier to debug and evolve your tech adopting mojo kinda makes sense to start with and then it gives you this opportunity to rethink these things so the two big gains are that the there's a performance gain and then there's the portability to all kinds of different devices and there's safety right so you talk about real types i mean not saying this is for everybody but that's actually a pretty big thing right yeah types are and and so there's a bunch of different aspects of what you know what value mojo provides and so i mean it's funny for me like i've been working on these kinds of technologies and tools for too many years now but you look at swift right and we talked about swift for tensorflow but swift as a programming language right for swift's now thirteen years old from when i started it yeah so because i started in two thousand ten if i remember and so that that project and i was involved with it for twelve years or something right that that project has gone through its own really interesting story arc right and it's a mature successful used by millions of people system right certainly not dead yet right but but also going through that story arc i learned a tremendous amount about building languages about building compilers about working with community and things like this and so that experience like i'm helping channel and bring directly into mojo and you know other systems same thing like apparently i like building building and iterating and evolving things and so you look at this llvm thing that i worked on twenty years ago and you look at mlir right and so a lot of the lessons learned in llvm got fed into mlir and i think that mlir is a way better system than llvm was and you know swift is a really good system and it's it's it's amazing but i hope that mojo will take the next step for step forward in terms of design in terms of running mojo people can play with it what's mojo playground yeah and from the interface perspective and from the hardware perspective what's this incredible thing running on yeah so right now so here we are two weeks after launch yes we decided that okay we're we're we have this incredible set of technology that we think might be good but we have not given it to lots of people yet and so we're very conservative and said let's put it in a workbook so that if it crashes we can do something about it mhmm we can monitor and track that right and so again things are still super early but we're having like one person a minute sign up mhmm with over seventy thousand people two weeks in it's kinda crazy so you you can sign up to a bunch of playground and you can use it in in the cloud yeah in your browser and so what that's running on bookbook yeah what that's running on is that's running on cloud vms and so you share a machine with a bunch of other people but turns out there's a bunch of them now because there's a lot of people and so what you're doing is you're getting free compute and you're getting to play with this thing in kind of a a limited controlled way so that we can make sure that it doesn't totally crash and be embarrassing right yeah so now a lot of the feedback we we've gotten is people wanna download it around locally so we're working on that right now and so that's so that's the goal to be able to download locally into it yeah that's what everybody expects and so we're working on that right now and so we just wanna make sure that we do it right and i think this is this is one of the lessons i learned from swift also by the way is that when we launched swift gosh it feels like forever ago it was twenty fourteen and we i mean it was super exciting i and we the team had worked on swift for a number of years in secrecy k and we four years into this development roughly of working on this thing at that point about two hundred and fifty people at apple knew about it yeah k so it was secret apple's good at secrecy and it was a secret project and so we launched this at wwc a bunch of hoopla and excitement and said developers are gonna be able to develop and submit apps to the app store in three months okay well several interesting things happened right so first of all we learned that a it had a lot of bugs it was not actually production quality and it was extremely stressful in terms of like trying to get it working for a bunch of people and so what happened is we went from zero to you know i don't know how many developers apple had at the time but a lot of developers overnight and they ran to a lot of bugs and it was really embarrassing and it was very stressful for everybody involved right it was also very exciting because everybody was excited about that the other thing i learned is that when that happened roughly every software engineer who did not know about the project at apple their head exploded when it was launched because they didn't know it was coming and so they're like wait what is this i i signed up to work for apple because i love objective c why is there a new thing right and so now what that meant practically is that the push from launch to first of all the fall but then to two dot o and three dot o and like all the way forward was super painful for the engineering team and myself it was very stressful the developer community was very grumpy about it because they're like okay well wait a second you're you're changing and breaking my code and like we have to to fix the bugs and it was just like a lot of tension and friction on all sides there's a lot of technical debt in the compiler because we have to run really fast you have to go implement the thing and unblock the use case and do the thing and and you know it's not right but you'd never have time to go back and do it right and i'm very proud of the swift team because they've come i mean we but they came so far and made so much progress over over this time since launch it's pretty incredible and swift is a very very good thing but i just don't wanna do that again right and so so i'll go more iterate more through the development process and so what we're doing is we're not launching it when it's hopefully zero dot nine with no testers mhmm we're launching it and saying it's zero dot one right and so we're setting expectations of saying like okay well don't use this for production right if you're interested in what we're doing we'll do it in an open way and we can do it together but don't use it in production yet like we'll get there but let's let's do it the right way and i'm also saying we're not in a race the thing that i wanna do is build the world's best thing yeah right because if you do it right and it lifts the industry it doesn't matter if it takes an extra two months yeah like two months is worth waiting and so doing it right and not being overwhelmed with technical debt and things like this is like again war wounds lessons learned whatever you wanna say i think is absolutely the right thing to do even though right now people are very frustrated that you know you can't download it or that it doesn't have feature x or something like this and so what have you learned in in in the little bit of time since it's been released into the wild that people have been complaining about feature x or y or z what have they been complaining about what they have been excited about like yeah almost like detailed things versus a big vid i i think everyone would be very excited about the big vision yeah yeah well so i mean i've been very pleased i mean in fact i mean we've we've been massively overwhelmed with response which is a good problem to have it's kinda like a success disaster yeah in a sense right and so i mean if you go back in time when we started modular which is just not yet a year and a half ago so it's still a pretty new company new team small but very good team of people like we started with extreme conviction that there's a set of problems that we need to solve and if we solve it then people will be interested in what we're doing right but but again you're building in basically secret right you're trying to figure it out it's the creation's a messy process you're having to go through different paths and understand what you wanna do and how to explain it often when you're doing disruptive and new kinds of things just knowing how to explain it is super difficult right and so when we launched we hoped people would be excited but you know i'm i'm an optimist but i'm also like don't wanna get ahead of myself and so when people found out about mojo i think their heads exploded a little bit right and you know here here here's a i think a pretty credible team that has built some languages and some tools before and so they have some lessons learned and are tackling some of the deep problems in the python ecosystem and giving it the love and attention that it should be getting and i think people got very excited about that and so if you look at that i mean i think people are excited about ownership and taking a step beyond rust right there's people that are very excited about that there's people that are excited about you know just like i made game of life go four hundred times faster right and things like that and that that's really cool there are people that are really excited about the okay i really hate writing stuff in c plus plus save me like systems engineers they're like stepping up like a little bit of gas so that that's that's that's that's me by the way also i really wanna stop writing c plus plus but the i get third person excitement when people tweet yeah i made this code game of life or whatever it's faster and you're like yeah and and and also like i i would also say that let me let me cast blame out to people who deserve it sure these terrible people who convinced me to do some of this yes jeremy howard yes that guy well he's been pushing for this kind of he's been pushing for a long time years yeah he's wanted this for a long time for years and so for people who don't know jeremy howard he's like one of the most legit people in the machine learning community he's he's a grassroots he really teaches he's an incredible educator he's an incredible teacher but also legit in terms of a machine learning engineer himself yeah so he's been running the fast dot ai and looking i think for exactly what you've talked about so and so i mean the first time so i met jeremy pretty early on but the first time i sat up and i'm like this guy is ridiculous is when i was at google and we're bringing up tpus and we had a whole team of people and we're there's this competition called dawnbench of who can train imagenet yeah fastest right yes and jeremy and one of his researchers crushed google yeah by not through sheer force of the amazing amount of compute and the number of tpus and stuff like that that he just decided that progressive image resizing mhmm was the right way to train the model and if you if you're epochs faster and make the whole thing go go vroom right yep and i'm like this guy is incredible right and so you can say anyways come back to you know where's mojo coming from chris finally listened to jeremy it's all his fault well there's a kind of very refreshing pragmatic view that he has about machine learning that i don't know if it it's like this mix of desire for efficiency but ultimately grounded in desire to make machine learning more accessible to a lot of people i don't know what that is i i guess that's coupled with efficiency and performance but it's not just obsessed about performance well so so a lot of ai and ai research ends up being that it has to go fast enough to get scale mhmm so a lot of people don't actually care about performance particularly on the research side until it allows them to have more a bigger dataset right and so suddenly now you care about distributed compute and like all these exotic hpc like you don't actually wanna know about that you just want to be able to do more experiments faster and do so with bigger datasets right and so jeremy has been really pushing limits and one of the things i'll say about jeremy and there's many things i could say about jeremy because i'm a fanboy of his but he it fits in his head and jeremy actually takes the time or many people don't to really dive deep into why is the beta parameter of the atom optimizer equal to this yeah right and he'll go survey and understand what are all the activation functions and the trade offs and why is it that everybody that does you know this model pick that thing so the why not just trying different values like really what is going on here right and so as a consequence of that like he's always he again he makes time but he he spends time to understand things at a depth that a lot of people don't and as you say he then brings it and teaches people and his his mission is to help lift you know his website says making ai uncool again like it's about like forget about the hype let's it's actually practical and useful let's teach people how to do this right now the problem jeremy struggled with is that he's pushing the envelope right research isn't about doing the thing that is staying on the happy path or the the well paved road right and so a lot of the systems today have been these really frag fragile fragmented things or special case in this happy path and if you fall off the happy path you get eaten by an alligator so what about so python has this giant ecosystem of packages and there's a package repository do you have ideas of how to do that well for mojo yeah how to do a repository of packages well so that's another really interesting problem that i knew about but i didn't understand how big of a problem it was python packaging a lot of people have very big pain points and a lot of scars with python packaging oh you mean so there's several things to say building and distributing and managing dependencies and versioning and all this stuff so from the perspective of if you want to create your own package yes and then or you wanna build on top of a bunch of other people's packages and then they get updated it's like this now i'm not an expert in this so i don't know the answer i think this is one of the reasons why it's great that we work as a team and there's other really good and smart people involved the but one of my one of the things i've heard from smart people who've done a lot of this is that the packaging becomes a huge disaster when you get the python and c together mhmm and so if you have this problem where you have code split between python and c now not only do you have to package the c code you have to build the c code c doesn't have a package manager right c doesn't have a dependency versioning management system right and so i'm not experienced in the state of the art and all the different python package managers but my understanding is that's a massive part of the problem and i think mojo solves that part of the problem directly heads on now one of the things i think we'll do with community and this isn't again we're not solving all the world's problems at once we have to be kind of focused to start with is that i think that we will have an opportunity to reevaluate packaging right and so i think that we can come back and say okay well given the new tools and technologies and the cool things we have that we've built up because we have not just syntax we have an entirely new compiler stack that works in a new way maybe there's other innovations we can bring together and maybe we can help solve that problem so almost a tangent to that question from the user perspective of packages it was always surprising to me that it was not easier to sort of explore and find packages the you know with with pip install and it just it feels it's an incredible ecosystem it's huge it's just interesting that it wasn't made it's still i think not made easier to discover packages to do yeah like search and discovery as youtube calls it well i mean it's kinda funny because this is one of the challenges of these like intentionally decentralized communities yeah and so i i don't know what the right answer is for python i mean there are many people that would or i don't even know the right answer for mojo like i so i there are many people that would have much more informed opinions than i do but but it's interesting if you look at this right open source communities you know there's git git is a fully decentralized and anybody can do it any way they want but then there's github mhmm right and github centralized commercial in that case right thing really help pull together and help solve some of the discovery problems and help build a more consistent community and so maybe there's opportunities for for something like a github for yeah although even github i might be wrong on this but the the search and discovery for github is not that great like i still use google search yeah well i mean may maybe that's because github doesn't wanna replace google search right and i i think there is room for specialized solutions to specific problems but sure i don't know i don't i don't know the right answer for github either that's they they can go figure that out but the point is to have an interface that's usable that's accessible to people of all different skill levels and stuff well and again like what what are the benefit of standards right standards allow you to build these next level of ecosystem the next level of infrastructure and next level of things and so again come back to i hate complexity c c plus python is complicated it makes everything more difficult to deal with it makes it difficult to port move code around work with all these things get more complicated and so i mean i'm not an expert but maybe mojo can help a little bit by helping reduce the amount of c in this ecosystem and make it therefore scale better so any kind of packages that are hybrid in nature would be a natural fit to move to mojo which which is a lot of them by the way yeah so a lot of them especially they're doing some interesting stuff computation wise let me ask you about some features yeah so we talked about obviously indentation that is a typed language or optionally typed is that the right way to say it it's either optionally or progressively or progressively i think the so so so people have very strong opinions on the right word to use yeah i don't know i look forward to your letters uh-huh so there's the the var versus let but let is for constants yep var is an optional yeah var var makes it mutable so you can reassign okay then there's function overloading oh okay yeah there's i mean there's a lot of source of happiness for me but function overloading that's i guess is that is that for performance or is that why does python not have function overloading so i can speculate so python is a dynamic language the way it works is that python and objective c are actually very similar worlds if you ignore syntax mhmm and so objective c is straight line derived from small talk a really venerable interesting language that much of the world has forgotten about but the people that remember it love it generally and the way that small talk works is that every object has a dictionary in it and the dictionary maps from the name of a function or the name of a value within an object to its implementation and so the way you call a method in objective c is you say go look up the way i call foo is i go look up foo i get a pointer to the function back and then i call it mhmm k that's how python works right and so now the problem with that is that the dictionary within a python object all the keys are strings and it's a dictionary yeah so you can only have one entry per name you think it's as simple as that i think it's as simple as that and so now why do they never fix this like why do they not change it to not be a dictionary why do they not change like do other things well you don't really have to in python because it's dynamic and so you can say i get into the function now if i got past an integer do some dynamic test for it if it's a string go do another thing there's another additional challenge which is even if you did support overloading you're saying okay well here's a version of a function for integers and a function for strings well you'd have even if you could put it in that dictionary you'd have to have the caller do the dispatch mhmm and so every time you call the function you'd have to say like is it an integer is it a string and so you'd have to figure out where to do that test and so in a dynamic language overloading is something you general you don't have to have so but now you get into just a type language and you know in in python if you subscript with an integer then you get typically one element out of a collection if you subscript with a range you get a different thing out mhmm right and so often in typed languages you'll want to be able to express the fact that cool i have different behavior depending on what i actually pass into this thing if you can model that it can make it safer and more predictable and faster and like all these things it it somehow feels safer yes but also feels empowering like in terms of clarity like you don't have to design whole different functions yeah well this is also one of the the challenges with the existing python typing systems is that in practice like you take subscript like in practice a lot of these functions they don't have one signature right they they actually have different behavior in different cases and so this is why it's difficult to like retrofit this into existing python code and make it play well with typing you kinda have to design for that okay so there's a interesting distinction that people that program python might be interested in is def versus f n so it's two different ways to define a function yep and f n is a stricter version of def what's the coolness that comes from the strictness so here you get into what is the trade off with the superset yes k so superset you have to or you really want to be compatible you've like if you're doing a superset you've decided compatibility with existing code is the important thing even if some of the decisions they made were maybe not what you choose yeah k so that means you put a lot of time in compatibility and it means that you get locked into decisions of the past even if they may not have been a good thing right now systems programmers typically like to control things right and they they wanna make sure that you know not not all cases of course and those and even systems programmers are not one thing right but but often you want predictability and so one of one of the things that python has for example as you know is that if you define a variable you just say x equals four i have a variable named x now i say some long method some some long name equals seventeen print out some long name oops but i typoed it mhmm right well the compiler the python compiler doesn't know in all cases what you're defining and what you're using and did you typo the use of it or the definition mhmm right and so for people coming from type languages again i'm not saying they're right or wrong but that drives them crazy because they want the compiler to tell them you typo the name of this thing mhmm right and so what f n does is it turns on as you say it's a strict mode and so it says okay well you have to actually declare intentionally declare your variables before you use them that gives you more predictability more error checking and things like this but you don't have to you don't have to use it and this is a way that mojo is both compatible because defs work the same way that defs have already always worked but it provides a new alternative that gives you more control and allows certain kinds of people that have a different philosophy to be able to express that and get that but usually if you're writing mojo code from scratch you'll be using fn it depends again it depends on your mentality right it's it's not it's not that def is python and fn is mojo mojo has both and it loves both right it really depends on that is strict yeah exactly do you are you are you playing around and scripting something out and is it a one off throwaway script cool like python is great at that i will still be using fn but yeah well so i i love strictness okay well so control power you also like suffering right yes go hand in hand how many how many pull ups i've lost count at this yeah like i said at this point so so and that's cool i love you for that yeah some and i love other people who like strict things right but but i don't want to say that that's the right thing because python's also very beautiful for hacking around and doing stuff and research and these other cases where you may not want that see i just feel like maybe i'm wrong in that but it feels like strictness leads to faster debugging so in terms of going from even on a small project from zero to completion it just i guess it depends how many bugs you generate usually well so i mean it it's again lessons learned in looking at the ecosystem it's really i mean i think it's if you study some of these languages over time like the ruby community for example now ruby is a pretty well developed pretty established community but along their path they really invested in unit testing and so i think that the ruby community has really pushed forward the state of the art of testing because they didn't have a type system that caught a lot of bugs at compile time right and so you can have the best of both worlds you can have good testing and good types right and things like this but but i thought that that it was really interesting to see how certain challenges get solved and in python for example the interactive notebook kind of experiences and stuff like this are really amazing and if you typo something it doesn't matter it just tells you that's fine right and so i think that the trade offs are very different if you're building a you know a large scale production system versus you're building and exploring a notebook and speaking of control the hilarious thing if you look at code i read just for myself for fun it's like littered with asserts everywhere k it's it's a kinda well then yeah you would like text it's basically saying in a dictatorial way this should be true now otherwise everything stops well and and and that that that that is a sign and i can't i love you man but that is a sign of somebody who likes control yeah and so yes i think that you'll like fn i think you'll like mojo therapy session yes i i definitely will speaking of asserts exceptions are called errors why is it called errors so we i mean we we use the same we we're the same as python mhmm right but we implement in a very different way right and so if you look at other languages like we'll pick on c plus plus our favorite right c plus plus has this thing called zero cost exception handling k so and this is in my opinion something to learn lessons from it's a nice polite word thing and so and so zero cost exception handling the way it works is that it's called zero cost because if you don't throw an exception there's supposed to be no overhead for the non error code mhmm and so it takes the error path out of the the common path it does this by making throwing an error extremely expensive and so if you actually throw an error with a c plus plus compiler using exceptions has to go look up in tables on the side and do all this stuff and so throwing an error could be like ten thousand times more expensive than referring from a function right also it's called zero cost exceptions but it's not zero cost by any stretch of the imagination because it massively blows out your code your binary it also adds a whole bunch of different paths because of structures and other things like that that exist in c plus plus and it reduces the number of optimizations it has like all these effects and so this thing that was called zero cost exceptions it really ain't okay now if you fast forward to to newer languages and and this includes swift and rust and go and and now mojo well and python's a little bit different because it's interpreted and so like it's got a little bit of a different thing going on but if you look at it if you look at compiled languages many newer languages say okay well let's not do that zero cost exception handling thing let's actually treat and throwing an error the same as returning a variant returning mhmm either the normal result or an error mhmm now programmers generally don't want to deal with all the typing machinery and like pushing around a variant and so you use all the syntax that python gives us for example try and catch and you know functions that raise and things like this you can put a raises decorator on your functions stuff like this and if you wanna control that and then the language can provide syntax for it but under the hood the way the computer executes it throwing errors basically as fast as returning something oh interesting so it's exactly the same way it's from a compiler perspective and so this is actually i mean it's it's a fairly nerdy thing right which is why i love it but the this has a huge impact on the way you design your apis right so in c plus plus huge communities turn off exceptions mhmm because the cost is just so high right and so the zero cost cost is so high right and so that means you can't actually use exceptions in many libraries right interesting and even for the people that do use it well okay how and when do you wanna pay the cost if i try to open a file should i throw an error well what if i'm probing around looking for something right i'm looking it up in many different paths well if it's really slow to do that maybe i'll add another function that doesn't throw an error or turns an error code instead mhmm and i have two different versions of the same thing and so it causes you to fork your apis mhmm and so you know one of the things i learned from apple and i still love is the art of api design is actually really profound i think this is something that python's also done a pretty good job at in terms of building out this large scale package ecosystem it's about having standards and things like this and so you know we wouldn't wanna enter a mode where you know there's this theoretical feature that exists in language but people don't use it in practice now i'll also say one of the other really cool things about this this implementation approach is that it can run on gpus and it can run accelerators and things like this and that standard zero cost exception thing would never work on an accelerator and so this is also part of how mojo can scale all the way down to like little embedded systems and to running on gpus and things like that can you actually say about the maybe is there some high level way to describe the challenge of exceptions and how they work in code during compilation so it's just this idea of percolating up a thing an error yeah yeah so the way the way to think about it is think about a function that doesn't return anything just as a simple case right and so you have function one calls function two calls function three calls function four along that call stack there are try blocks right and so if you have function one calls function two function two has a try block and then within it it calls function three right well what happens if function three throws well actually start simpler what happens if it returns well if it returns it's supposed to go back out and continue executing and then fall off the bottom of the try block and keep going and all is good if the function throws you're supposed to exit the current function and then get into the accept clause mhmm right and then do whatever code is there and then keep following on and going on and so the way that a compiler like mojo works is that the call to that function which happens in the accept block calls the function and then instead of returning nothing it actually returns you know an a variant between nothing and an error and so if you return normally fall off the bottom or do a return you return nothing and if you throw throw an error you return the variant that is i'm an error right so when you get to the call you say okay cool i called a function hey i know locally i'm in a try block right and so i i call the function and then i check to see what it returns uh-huh if it's that error thing jump to the accept block and that's all done for you behind the scenes exactly and so the compiler does all this for you and i mean one of the things if you dig into how this stuff works in python it gets a little bit more complicated because you have finally blocks which now need you need to go into do some stuff and then those can also throw and return wait what nested and like this stuff matters for compatibility like there's there's can nest them there's with clauses and so with clauses are kinda like finally blocks of some special stuff going on and so there's nesting in general nesting of anything nesting of functions should be illegal well it just feels like it adds a level of complexity alexa i'm merely an implementer and so this is again one one one of one of the one of the trade offs you get when you decide about a superset is you get to implement a full fidelity implementation of the thing that you decided is good and so yeah i mean we can we can complain about the reality of the world and shake our fist but it always feels like you shouldn't be allowed to do that like to declare functions and set functions inside functions oh wait wait wait what what happened to lex the the lisp guy no i understand that but lisp is what i used to do in college so now you've grown up you know we've all done things in college we're not proud of no wait a sec wait a sec lisp i love lisp okay wait yeah i was gonna say you you're afraid of me irritating the whole internet like i love lisp it's it's it worked it worked as a joke in my head and yeah it is so so so nested functions are joking aside actually really great in for certain things right and so these are also called closures closures are pretty cool and you can pass callbacks there's a lot of good patterns and so so speaking of which i don't think you have nested functions implemented yet in mojo we don't have lambda syntax but we do have nested lambda syntax functions yeah so there there's a few things on the road map that you have that it'd be cool to sort of just fly through because it's interesting to see you know how many features there are in a language small and big yep they have to implement yeah so first of all there's tuple support and that has to do with some of their specific aspects of it like the parentheses or not parentheses that yeah this is just a totally a syntactic thing a syntactic thing okay there's but it's cool still so keyword arguments and functions yeah so this is where in python you can say call a function x equals four yeah and x is the name of the argument that's a nice sort of documenting self documenting feature yeah i mean and again this isn't rocket science to implement this is just the laundry it's just on the list the the bigger features are things like traits mhmm so traits are when you wanna define abstract so when you get into typed languages you need the ability to write generics and so you wanna say i wanna write this function and now i want to work on all things that are arithmetic like mhmm well what does arithmetic like mean well arithmetic like is a categorization of a bunch of types and so it you again you can define many different ways and i'm not gonna go into ring theory or something but the you know you can say it's arithmetic like if you can add subtract multiply divide it for example right and so what you're saying is you're saying there's a set of traits that apply to a broad variety of types and so there all these types are arithmetic like all these tensors and floating point integer and like there's this category of of types and then i can define on an orthogonal axis algorithms that then work against types that have those properties and so this is a again it's a widely known thing it's been implemented in swift and rust and many languages so it's not haskell which is where everybody learns learns their tricks from but the but we need to implement that and that'll enable a new level of expressivity so classes yeah classes are a big deal it's a big deal still to be implemented like you said a lambda syntax and there's like detailed stuff like whole module import support for top level code and file scope so and then global variables also so being able to have variables outside of a top level well and so this comes back to the where mojo came from and the fact that this is your point one right and so we're building so modular is building an ai stack right and an ai stack has a bunch of problems working with hardware and writing high performance kernels and doing this kernel fusion thing i was talking about and getting the most out of the hardware and so we've really prioritized and built mojo to solve mojo's problem right now our north star is build out and support all the things and so we're making incredible progress by the way mojo's only like seven months old mhmm so that's another interesting thing well i mean part of the reason i wanted to mention some of these things is like there's a lot to to do and it's pretty cool how you just kinda sometimes you take for granted how much there is in a programming language how many cool features you kinda rely on and this is kinda a nice reminder when you yeah lay it as a to do list yeah and so i mean but also you look into it's it's amazing how much is also there and you take it for granted that a value if you define it it will get destroyed automatically like that little feature itself is actually really complicated given the way the ownership system has to work and the way that works within mojo is a huge step forward from what ross and swift have done but can you say that again when a value you define it gets destroyed automatically so like like say you have a string right so you define a string on the stack k or whatever that means like in in your local function right and so you say like whether it be in a def and so you just say x equals hello world right well if your string type requires you to allocate memory then when it's destroyed you have to deallocate it so in python and in mojo you define that with the del method mhmm right where does that get run well it gets run sometime between the last use of the value and the end of the program like in this you now get into garbage collection you get into like all these long debated you talk about religions and and trade offs and things like this this is a hugely hotly contested world if you look at c plus plus the way this works is that if you define a variable or a set of variables within a function they get destroyed in a last in first out order mhmm so it's like nesting k this has a huge problem because if you define you have a big scope and you define a whole bunch of values at the top and then you use them and then you do a whole bunch of code that doesn't use them mhmm they don't get destroyed until the very end of that scope right and so this also destroys tail calls so good functional programming right this this has a bunch of different impacts on you know you talk about reference counting optimizations and things like this a bunch of very low level things and so what mojo does is it has a different approach on that from any language i'm familiar with where it destroys them as soon as possible and by doing that you get better memory use you get better predictability you get tail calls that work you get a bunch of other things you get better ownership tracking there's a bunch of these very simple things that are very fundamental that are already built in their in mojo today that are the things that nobody talks about generally but when they don't work right you find out and you have to complain about is it trivial to know what's the soonest possible to delete a thing that's not gonna be used again yeah well i mean it's generally trivial it's it's after the last use of it so if you just find x as a string and then you have some use of x somewhere in your code within that scope you mean within a scope that is accessible it's yeah exactly so you can only use something within its scope yeah and so then it doesn't wait until the end of the scope to delete it it it it destroys it after the last use so there's kinda some very eager machine that's just sitting there and deleting yeah and it's all in the compiler so it's not at runtime which is also cool and so interesting the yeah and so what and this is actually nontrivial because you have control flow yeah right and so it gets complicated pretty quickly and so like getting this right was not oh so you have to insert delete like in a lot of places potentially yeah exactly so the compiler has to reason about this and this is where again it's experience building languages and not getting this right so again you get another chance to do it and you get basic things like this right but it's it's extremely powerful when you do that right and so there's a bunch of things like that that kind of combine together and this comes back to the you get a chance to do it the right way do it the right way and make sure that every brick you put down is really good so that when you put more bricks on top of it they stack up to something that's beautiful well there's also like how many design discussions do there have to be about particular details like implementation of particular small features because the features that seem small i bet some of them might be like really require really big design decisions yeah well so i mean let me give you another example of this python has a feature called async await mhmm so it's it's a new feature i mean in in the long arc of python history it's a relatively new feature right that allows way more expressive asynchronous programming mhmm k again this is this is a python's a beautiful thing and they did things that are great for mojo for completely different reasons the reason that async await got added to to python as far as i know is because python doesn't support threads okay and so python doesn't support threads but you wanna work with networking and other things like that that can block i mean python does support threads it's just not its strength and so and so they added this feature called async await it's also seen in other languages like swift and javascript and many other places as well it's in kuwait and mojo is amazing because we have a high performance heterogeneous compute runtime underneath the covers that then allows non blocking io so you get full use of your accelerator mhmm that's huge it turns out it's actually really an important part of fully utilizing the machine you talk about design discussions that took a lot of discussions right and it probably will require more iteration and so my philosophy with mojo is that you know we have a a small team of really good people that are pushing forward and they're very good at the extremely deep knowing how the compiler and run time and like all the the low level stuff works together but they're not perfect same thing as the swift team right and this is where one of the reasons we released mojo much earlier is so we can get feedback and we've already like renamed the keyword due to community feedback and sure we use an ampersand and now it's named in out we're not we're not renaming existing python keywords because that breaks compatibility right we're renaming things we're adding and making sure that they are designed well we get usage experience we iterate and work with the community because again if you scale something really fast and everybody writes all their code and they start using it in production then it's impossible to change and so you wanna learn from people you wanna iterate and work on that early on and this is where design discussions it's it's actually quite important could you could you incorporate an emoji like into the language into the main language like a good like a like a do you have a do you have a favorite one well i really like in terms of humor like raw full whatever rolling on the floor laughing so that could be like a what would that be the use case for that like an accept throw an exception of some sort i don't know you should totally file a feature request or maybe a hard one it has to be a hard one people have told me that i'm insane so this is this is this is i i'm liking this i'm gonna i'm gonna use the viral nature of the internet to to actually get this to get this passed i mean it's funny you come back to the flame emoji file extension right the you know we have the option to use the flame emoji which just even the that concept cause for example the people at github say now i've seen everything you know what i mean like yeah there's something it kinda it's reinvigorating it's like it's like oh that's possible that's really cool that that for for some reason that makes everything else like really exciting the world is ready for this stuff right and so you know when we have a package manager we'll clearly have to innovate by having the compiled package thing be the little box with the bow on it right i mean it has to be done it has to be done is there some stuff on the road map that you're particularly stressed about or excited about that you're thinking about a lot i mean as of today's snapshot which will be obsolete tomorrow the lifetime stuff is really exciting and so lifetimes give you safe references to memory without dangling pointers and so this has been done in languages like rust before and so we have a new approach which is really cool i'm very excited about that that'll be out to the community very soon the traits feature is really a big deal and so that's blocking a lot of api design and so there's that i think that's really exciting a lot of it is these kind of table stakes features one of the things that is again also lessons learned with swift is that programmers in general like to add syntactic sugar mhmm and so it's like oh well this annoying thing like like in python you you have to spell unbar unbar add why can't i just use plus mhmm def plus come on why can't i just do that right and so trigger a little bit of syntactic sugar it makes sense it's beautiful it's obvious we're trying not to do that and so for two different reasons one of which is that again less than one with swift swift has a lot of syntactic sugar which may or may be a good thing maybe not i don't know but but because it's such an easy and addictive thing to do sugar like make sure blood get crazy right like the community will really dig into that and wanna do a lot of that and i think it's very distracting from building the core abstractions second is we wanna be a good member of the python community right and so we wanna work with the broader python community and yeah we're pushing forward a bunch of systems programming features and we need to build them out to understand them but once we get a long ways forward i wanna make sure that we go back to the python community and say okay let's do some design reviews let's actually talk about this stuff let's figure out how we want this stuff all to work together and syntactic sugar just makes all that more complicated so and yeah list comprehensions are yet to be implemented yeah and my favorite i mean i dictionaries yeah there's some there's some basic zero point one zero point one yeah but nonetheless it's actually still quite interesting and useful as you mentioned modular is very new mojo is very new it's a relatively small team yeah that's building up this yeah we're just gigantic stack yep this incredible stack that's going to perhaps define the future of development of our ai overlords we just hope it will be useful as do all of us so what what have you learned from this process of building up a team maybe one question is how do you hire yeah great programmers great people that operate in this compiler hardware machine learning software interface design space yeah and maybe are a little bit fluid in what they can do so okay so language design too so building a company is just as interesting in different ways as building a language mhmm like different skill sets different things but super interesting and i've built a lot of teams in a lot of different places if you zoom in from the big problem into recruiting well so here's our problem k i'll i'll just i'll be very straightforward about this we started modular with a lot of conviction about we understand the problems we understand the customer pain points we need to work backwards from the suffering in the industry and if we solve those problems we think it'll be useful for people but the problem is is that the people we need to hire as you say are all these super specialized people that have jobs at big tech big tech worlds right and you know we i don't think we have product market fit in the way that a normal start up does or we don't have product market fit challenges because right now everybody's using ai and so many of them are suffering and they want help mhmm and so again we started with strong conviction now again you have to hire and recruit the best and the best all have jobs mhmm and so what we've done is we said okay well let's build an amazing culture start with that that's usually not something a company starts with usually you hire a bunch of people and then it people start fighting and it turns into a gigantic mess and then you try to figure out how to improve your culture later my cofounder tim in particular is super passionate about making sure that that's right and we've spent a lot of time early on to make sure that we can scale can you comment sorry before we get to the second yeah what makes for a good culture so i mean there's many different cultures and i have learned many things from many different people several very unique almost famously unique cultures and some of them i learned what to do and some of them i learned what not to do yep k and so we want an inclusive culture i believe in like amazing people working together mhmm and so i've seen cultures where people you have amazing people and they're fighting each other i see amazing people and they're told what to do like thou shalt line up and do what i say it doesn't matter if it's the right thing do it mhmm right and neither of these is the and i've seen people that have no direction they're just kinda floating in different places and they wanna be amazing they just don't know how and so a lot of it starts with have a clear vision right and so we have a clear vision of what we're doing and so i kind of grew up at apple in my engineering life right and so a lot of the apple dna rubbed off on me my cofounder tim also is like a strong product guy and so what we've learned is you know i was taught at apple that you don't work from building cool technology you don't work from like come up with a cool product and think about the features you'll have in the big check boxes and stuff like this because if you go talk to customers they don't actually care about your product they don't care about your technology what they care about is their problems mhmm right and if your product can help solve their problems well hey they might be interested in that mhmm right and so if you speak to them about their problems if you understand and you have compassion you understand what people are working with then you can work backwards to building an amazing product so the vision is done by defining the problem and then you can work backwards in solving technology got it and at apple like it's i think pretty famously said that you know for every you know there's a hundred nos for every yes i would refine that to say that there's a hundred not yets for every yes but famously if you go back to the iphone for example right the iphone one i read i mean many people laughed at it because it didn't have three g it didn't have copy and paste right and then a year later okay finally it has three g but it still doesn't have copy and paste it's a joke nobody will ever use this product blah blah blah blah blah blah blah right well year three had copy and paste and people stopped talking about it right and so and so being laser focused and having conviction understanding what the core problems are and giving the team the space to be able to build the right tech is really important also i mean you come back to recruiting you have to pay well right so we have to pay industry leading salaries and have good benefits and things like this that's a big piece we're a remote first company and so we have to so remote first has a very strong set of pros and cons on the one hand you can hire people from wherever they are and you can attract amazing talent even if they live in strange places or unusual places on the other hand you have time zones on the other hand you have like everybody on the internet will fight if they don't understand each other and so we've had to learn how to like have a system where we actually fly people in and we get the whole company together periodically and then we get work groups together and we plan and execute together and that's like an intimacy to the in person brainstorming oh yeah i guess you lose but maybe you don't maybe if you get to know each other well and you trust each other maybe you can do that well so when when the pandemic first hit i mean i'm curious about your experience too the first thing i missed was having whiteboards yeah right and those design discussions where like i can high high intensity work through things get things done work through the problem of the day understand where you're on figure out and solve the problem and move forward yeah but we figured out ways to work around that now with you know all these screen sharing and other things like that that we do the thing i miss now is sitting down at a lunch table with the team yeah the spontaneous things like those the the the coffee the coffee bar things and the and the bumping into each other and getting to know people outside of the transactional solve a problem over zoom and i think there's there's just a lot of stuff that i'm not an expert at this i don't know who is hopefully there's some people but there's stuff that somehow is missing on zoom even with the whiteboard if you look at that if you have a room with one person at the whiteboard and there's like three other people at a table there's a first of all there's a social aspect to that where you're just shooting shit a little bit almost like yeah as people are just kinda coming in and yeah that but also while the like it's a breakout discussion that happens for like seconds at a time maybe an inside joke or it's like this interesting dynamic that happens that zoom you're bonding yeah you're bonding you're bonding but through that bonding you get the excitement there's certain ideas that are like complete bullshit and you'll see that in the faces of others that you won't see necessarily on zoom and and like something it feels like that should be possible to do without being in person well i mean being in person is a very different thing yeah i don't it's worth it but you can't always do it and so again we're still learning and and we're all still learning as like humanity with this new reality right but but what we found is that getting people together whether it be a team or the whole company or whatever is worth the expense because people work together and are happier after that like it just it just like there's a massive period of time where you like go out and things start getting frayed pull people together and then yeah you realize that we're all working together we see things the same way we work through the disagreement or the misunderstanding we're talking across each other and then you work much better together and so things like that i think are really quite important what about people that are kinda specialized in very different aspects of the stack working together what what are some interesting challenges there yeah well so i mean i mean there's lots of interesting people as you can tell i'm you know hard to deal with too but you're one of the most lovable people the so one of the so there's different philosophies in building teams for me and so some people say hire ten x programmers and that's the only thing that whatever that means right what i believe in is building well balanced teams teams that have people that are different in them like if you have all generals and no troops mhmm or all troops and no generals or you have all people that think in one way and not the other way what you get is you get a very biased and skewed and weird situation where people end up being unhappy and so what i like to do is i like to build teams of people where they're not all the same you know we do have teams and they're focused on like runtime or compiler gpu or excel or whatever the the specialty is but people bring a different take and have a different perspective and i look for people that complement each other and particularly if you look at leadership teams and things like this you don't want everybody thinking the same way you want people bringing different perspectives and experiences and so i think that's really important that's team but what about building a a company as ambitious as modular so what i mean some interesting questions there oh i mean so many like so one of the things i love about okay so modular is the first company i built from scratch one of the first things that was profound was i'm not cleaning up somebody else's mess mhmm right and so if you look at and that's liberating to some degree it's super liberating and and also many of the projects i've built in the past have not been core to the product of the company mhmm swift is not apple's product right mlir is not google's revenue machine or whatever right the the it's not it's it's important but it's like working on the accounting software for you know the the retail giant or something right it's it's it's it's like enabling infrastructure and technology and so at modular the the tech we're building is here to solve people's problems like it is directly the thing that we're giving to people and so this is a really big difference and what it means for me as a leader but also for many of our engineers is they're working on the thing that matters mhmm and that's actually pretty i mean again for for compiler people and things like that that's that's usually not the case right and so that's that's also pretty exciting and and quite nice but the one of the ways that this manifests is it makes it easier to make decisions and so one of the challenges i've had in other worlds is it's like okay well community matters somehow for the goodness of the world like or open source matters theoretically but i don't wanna pay for a t shirt yeah right or some swag like well t shirts cost ten bucks each you can have a hundred t shirts for a thousand dollars to a mega corp a thousand dollars is uncountably can't count that low yes right but justifying it and getting a t shirt by by the way if you'd like a t shirt i can give you a t shirt well i would one hundred percent like a t shirt are you joking you can have a fire emoji t shirt is that i will i will treasure this is that a good thing i will pass it down to my grandchildren and so you know it's it's very liberating to be able to decide i think that i should have a t shirt right and it it becomes very simple because i like lex this this this is awesome yeah so i have to ask you about the one of the interesting developments with large language models is that they're able to generate code recently really well yes to a degree that maybe i don't know if you understand but i have i struggle to understand because it it forces me to ask questions about the nature of programming of the nature of thought because the language models are able to predict the kind of code i was about to write so well yep that it makes me wonder like how unique my brain is and where the valuable ideas actually come from like how much do i contribute in terms of ingenuity innovation to code i write or design and that kind of stuff when you stand on the shoulders of giants are you really doing anything and what llms are helping you do is they help you stand on the shoulders of giants when you program there's mistakes they're interesting that you learn from but i just it would love to get your opinion first high level yeah of what you think about this impact of large language models when they do program synthesis when they generate code yeah well so i don't know where it all goes yeah i'm an optimist and i'm a human optimist right i think that things i've seen are that a lot of the llms are really good at crushing leak code projects mhmm and they can reverse the link list like crazy well it turns out there's a lot of instances of that on the internet and it's a pretty stock thing and so if you want to see standard questions answered llms can memorize all the answers and that can be amazing and also they do generalize out from that and so there's good work on that but but i think that if you in my experience building things building something like you talk about mojo or you talk about these things or you talk about building an applied solution to a problem it it's also about working with people it's about understanding the problem what is the product that you wanna build what are the use case what are the customers you can't just go survey all the customers because they'll tell you that they want a faster horse mhmm maybe they need a car right and so a lot of it comes into you know i don't feel like we have to compete with llms i think they'll help automate a ton of the mechanical stuff out of the way and just like you know i think we all try to scale through delegation and things like this delegating rote things to an llm i think is an extremely valuable approach that will help us all scale and be more productive but i think it's a it's a fascinating companion but i'd say i don't think that that means that we're gonna be done with coding sure sure but there's power in it as a companion and yeah absolutely from there i could i would love to zoom in onto mojo a little bit do you think do you think about that do you think about llms generating mojo code and helping sort of like when you design new programming language it almost seems like man it would be nice to sort of almost as a way to learn how i'm supposed to use this thing for them to be trained on some of the mojo code so i do lead an ai company so maybe there'll be a mojo llm at some point but if your question is like how do we make a language to be suitable for llms yeah i think that the i think the cool thing about llms is you don't have to right and so if you look at what is english or any of these other terrible languages that we as humans deal with on a continuous basis they're never designed for machines and yet they're the intermediate representation they're the exchange format that we humans use to get stuff done right and so these programming languages they're an intermediate representation between the human and the computer or the human and the compiler roughly right and so i think the lms will have no problem learning whatever keyword we pick may maybe the phi emoji is gonna oh maybe that's gonna break it it doesn't tokenize no the reverse of that it will actually enable it because one of the issues i could see with being a superset of python is there would be confusion about the gray area so it would be mixing stuff but well i'm i'm a human optimist i'm also an llm optimist i think that we'll solve that problem we'll solve the yeah gee the but but you look at that and you say okay well reducing the rote thing right turns out compilers are very particular and they really want things they really want the indentation to be right they really want the colon to be there on your else or else it'll complain right i mean compilers can do better at this but lms can totally help solve that problem and so i'm very happy about the new predictive coding and copilot type features and things like this because i think it'll all just make us more productive it's still messy and fuzzy and uncertain unpredictable so but is there a future you see given how big of a leap gpt four was where you start to see something like llms inside a compiler or no i mean you could do that yeah absolutely i mean i think that would be interesting is that wise well well i mean it would be very expensive so compilers run fast and they're very efficient and llms are currently very expensive there's on device llms and there's other things going on and so maybe there's an answer there i think that one of the things that i haven't seen enough of is that so llms to me are amazing when you tap into the creative potential of the hallucinations mhmm right and so if you're build doing creative brainstorming or creative writing or things like that the hallucinations work in your favor if you're writing code that has to be correct because you're gonna ship it in production then maybe that's not actually a feature and so i think that there there has been research and there has been work on building algebraic reasoning systems and kind of like figuring out more things that feel like proofs mhmm and so i think that there could be interesting work in terms of building more reliable at scale systems and that could be interesting but if you've chased that rabbit hole down the question then becomes how do you express your intent to the machine and so maybe you want an llm to provide the spec but you have a different kind of net that then actually implements the code right so it's to use the it's documentation and and inspiration versus the actual implementation yeah potentially since a successful modular will be the thing that runs i say so jokingly our ai overlords but ai systems that are used across i know it's a cliche term but internet of things so across so so i i'll joke and say like agi should be written in mojo yeah agi should be written in mojo you're joking but it's also possible that it's not a joke that a lot of the ideas behind mojo is seems like the the natural set of ideas that would enable at scale training and inference of ai systems so i just have to ask you about the big philosophical question about human civilization so folks like eliezer yatkowski are really concerned about the threat of ai yeah do you think about the the good and the bad that can happen at scale deployment of ai systems well so i've i've thought a lot about it and there's a lot of different parts to this problem everything from job displacement to skynet yeah things like this and so you can zoom into subparts of this problem i'm not super optimistic about agi being solved next year i don't think that's gonna happen personally so you have a kinda zen like calm about because there's a nervousness because the leap of g b t four seemed so big sure it's it's like we're almost we're there's some kind of transitionary period you're you're thinking well so so so i mean there's a couple of things going on there one is i'm sure gpt five and seven and nineteen will be also huge leaps they're also getting much more expensive to run mhmm and so there may be a limiting function in terms of just expense on one hand and train like that that could be a limiter that slows things down but i think the bigger limiter is outside of like skynet takes over and i don't spend any time thinking about that because if skynet takes over and kills us all then i'll be dead so i don't worry about that so you know i mean that's just okay i have other things to worry about i'll just focus on yeah i'll focus and not worry about that one but i think that the the other thing i'd say is that ai moves quickly but humans move slowly and we adapt slowly and so what i expect to happen is just like any technology diffusion like the promise and then the application takes time to roll out mhmm and so i think that i'm not even too worried about autonomous cars defining away all the taxi drivers remember autonomy was supposed to be solved by twenty twenty yeah boy do i remember so and and so like i think that on the one hand we can see amazing progress but on the other hand we can see that you know the the reality is a little bit more complicated and it may take longer to roll out than than you might expect well that's in the physical space i i i do think in the digital space is the stuff that's built on top of llms that runs you know the millions of apps that could be built on top of them and that could be run on millions of devices millions of types of devices yeah i i just think that the rapid effect it has on human civilization could be truly transformative to it yeah we don't even know well and so the predict well and there i think it depends on are you an optimist or a pessimist yeah or a masochist just to clarify optimist about human civilization me too and so i look at that as saying okay cool well ai do right and so some people say oh my god is it gonna destroy us all how do we prevent that i i kinda look at it from a is it gonna unlock us all right you talk about coding is it gonna make so i don't have to do all the repetitive stuff well suddenly that's a very optimistic way to look at it and you look at what a lot of a lot of these technologies have done to improve our lives and i want that to go faster what do you think the future of programming looks like in the next ten twenty thirty fifty years yeah with llms and with with mojo with modular like the vision for devices the hardware to compilers to this to the different stacks of software yeah well so what i want i mean coming coming back to my arch nemesis right it's complexity right so again me being the optimist if we drive down complexity we can make these tools these technologies these cool hardware widgets accessible to way more people right and so what i'd love to see is more personalized experiences more things the research getting into production instead of being lost at neurips right and so and like the the the these things that impact people's lives by entering products and so one of the things that i'm a little bit concerned about is right now the big companies are investing huge amounts of money and are driving the top line of ai capability forward really quickly but if it means that you have to have a hundred million dollars to train a model or more hundred billion dollars mhmm right well that's gonna make it very concentrated with very few people in the world that can actually do this stuff i would much rather see lots of people across the industry be able to participate and use this right and you look at this you know i mean a lot of great research has been done in the health world and looking at like detecting pathologies and doing radiology with ai and like doing all these things well the problem today is that to deploy and build these systems you have to be an expert in radiology and an expert in ai and if we can break down the barriers so that more people can use ai techniques and it's more like programming python which roughly everybody can do if they want to right then i think that we'll get a lot more practical application of these techniques and a lot more nicheier cool but narrower demands and i think that's that's gonna be really cool do you think we'll have more or less programmers in the world now well so i think we'll have more more programmers but they may not consider themselves to be programmers that'd be a different name for you right i mean do you consider somebody that uses you know i think that arguably the most popular programming language is excel yeah right yep and so do they consider themselves to be programmers maybe not i mean some of them make crazy macros and stuff like that but but but what what you you mentioned steve jobs is it's the bicycle for the mind mhmm it allows you to go faster right and so i think that as we look forward right what is ai i look at it as hopefully a new programming paradigm it's like object oriented programming right if you wanna write a cat detector you don't use for loops mhmm it turns out that's not the right tool for the job right and so right now unfortunately because i mean it's not unfortunate but it's just kinda where where things are ai is this weird different thing mhmm that's not integrated into programming languages and normal tool chains and all the technology is really weird and doesn't work right and you have to babysit it and it every time you switch hardware it's different it shouldn't be that way when you change that when you fix that suddenly again the tools technologies can be way easier to use you can start using them for many more things and so that that's that's why i would be excited about what kind of advice could you give to somebody in high school right now or maybe early college who's curious about programming and feeling like the world is changing really quickly here yeah well what kind of stuff to learn what kind of stuff to work on should they finish college should they go work at a company should they build a thing what what do you think well so i mean one of the things i'd say is that you'll be most successful if you work on something you're excited by and so don't get the book and read the book cover to cover and study and memorize and recite and flashcard and go build something like go solve a problem go build the thing that you want to exist go build an app go build train a model like go build something and actually use it and set a goal for yourself and if you do that then you'll you know there's a success there's the adrenaline rush there's the achievement there's the unlock that i think is where you know if you keep setting goals and you keep doing things and building things learning by building is really powerful in terms of career advice i mean everybody's different it's very hard to give generalized experience generalized advice i'll i'll speak as you know a compiler nerd if everybody's going left sometimes it's pretty cool to go right yeah and so just because everybody's doing a thing it doesn't mean you have to do the same thing and follow the herd in fact i think that sometimes the most exciting path through life lead to being curious about things that nobody else actually focuses on right and turns out that understanding deeply parts of the problem that people want to take for granted makes you extremely valuable and specialized in ways that the herd is not and so again i mean there's lots of rooms for specialization lots of rooms for generalists there's lots of room for different kinds and parts of the problem but but i think that it's you know just because everything everybody's doing one thing doesn't mean you should necessarily do it and now the herd is using python so if you wanna be a rebel go check out mojo and help chris and the rest of the world fight the archnemesis of complexity because simple is beautiful there you go chris you're an incredible person you've you've been so kind to me ever since we met you've been extremely supportive i'm forever grateful for that thank you for being who you are for being legit for being kind for fighting this really interesting problem of how to make ai accessible to huge number of people huge number of devices yeah well so lex you're a pretty special person too right and so i think that you know one of the funny things about you is that besides being curious and pretty damn smart you're actually willing to push on things and you're you're i think that you've got an agenda to like make the world think which i think is a pretty good agenda it's a pretty good one thank you so much for talking today chris yeah thanks lex thanks for listening to this conversation with chris lattner to support this podcast please check out our sponsors in the description and now let me leave you some words from isaac asimov i do not fear computers i fear the lack of them thank you for listening and hope to see you next time